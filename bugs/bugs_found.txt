=====
BUG #33 (CONFIRMED)

Date reported:

Type: Assertion failure

URLs: https://github.com/Microsoft/ChakraCore/issues/5630

Original: jsfuzz/seeds/test262/annexB/language/global-code/switch-case-global-existing-block-fn-update.js

Fuzzed: fuzzed_test262_annexB_language_global-code_switch-case-global-existing-block-fn-update.js

Patch: 

Pattern:
-------------JavaScriptCore
-------------Chakra
-------------SpiderMonkey
Error: Expected SameValue(«first declaration», «second declaration») to be true
-------------v8
Error: Expected SameValue(«first declaration», «second declaration») to be true

Explanation: 
There is an inconsistency in Chakra and JSC if a switch statement with only one case block evaluation that could be not reached.



=====
BUG #32 (CONFIRMED)

Date reported:

Type: Assertion failure

URLs: https://bugs.chromium.org/p/v8/issues/detail?id=8088

Original: 

Fuzzed: fuzzed_DukTape_ecmascript_test-bi-math-imul.js
fuzzed_test262_annexB_language_global-code_block-decl-global-existing-var-no-init.js

Patch: 

Pattern:
-------------JavaScriptCore
Error: 'break' is only valid inside a switch or loop statement.
-------------Chakra
Error: Can't have 'break' outside of loop
-------------SpiderMonkey
Error: unlabeled break must be inside loop or switch:
-------------v8

Explanation: 
There is an inconsistency if it evaluate a `break` outside of loop, V8 should throw a SyntaxError.

=====
BUG #31 (NEW)

Date reported:

Type: Assertion failure

URLs: https://bugs.webkit.org/show_bug.cgi?id=188899

Original: jsfuzz/seeds/test262/annexB/built-ins/Function/createdynfn-html-open-comment-body.js

Fuzzed: fuzzed_test262_annexB_built-ins_Function_createdynfn-html-open-comment-body.js

Patch: 

Pattern:
-------------JavaScriptCore
Error: Unexpected token '}'. Expected a parameter pattern or a ')' in parameter list.
-------------Chakra
-------------SpiderMonkey
-------------v8

Explanation: 
JSC throws a SyntaxError when it try to parsing the HTML comment block as a Function param.

=====
BUG #30 (FIXED)

Date reported:

Type: Assertion failure

URLs: 
https://github.com/Microsoft/ChakraCore/issues/5617
https://bugs.chromium.org/p/v8/issues/detail?id=8078

Original: jsfuzz/seeds/test262/built-ins/String/prototype/padEnd/fill-string-empty.js

Fuzzed: fuzzed_test262_built-ins_String_prototype_padEnd_fill-string-empty.js

Patch: 

Pattern:
-------------JavaScriptCore
-------------Chakra
Error: String length is out of bound
-------------SpiderMonkey
-------------v8
Error: Invalid string length

Explanation: 
According to ecma specs (21.1.3.13) on step `8. If filler is the empty String, return S.`
V8 and Chakra throws a RangeError instead of return the original string.
In specs, if the maxLength is reached the maxLength should be converted to min(len, 2**53 - 1) but in this case the filler is an empty string, so Chakra should return the original string.

=====
BUG #29 (CONFIRMED)

Date reported:

Type: Assertion failure

URLs: https://github.com/Microsoft/ChakraCore/issues/5968

Original: jsfuzz/seeds/v8/attached/6651_simple.js

Fuzzed: fuzzed_attached_v8_6651_simple.js

Patch: 

Pattern:
-------------JavaScriptCore
Error: Wasm validation failure expected
-------------Chakra
Error: Wasm validation failure expected
-------------SpiderMonkey
-------------v8

Explanation: 
it was observed that Chakra didn't raised a WASM.CompileError due 31 offset.

=====
BUG #28 (NEW)

Date reported:

Type: Assertion failure

URLs: https://bugs.webkit.org/show_bug.cgi?id=188930

Original: jsfuzz/seeds/test262/annexB/language/eval-code/direct/global-if-decl-else-decl-b-eval-global-existing-block-fn-update.js

Fuzzed: fuzzed_test262_annexB_language_eval-code_direct_global-if-decl-else-decl-b-eval-global-existing-block-fn-update.js

Patch: 

Pattern:
-------------JavaScriptCore
-------------Chakra
Error: Expected SameValue(«first declaration», «second declaration») to be true
-------------SpiderMonkey
Error: Expected SameValue(«first declaration», «second declaration») to be true
-------------v8
Error: Expected SameValue(«first declaration», «second declaration») to be true

Explanation:
I found out an inconsistency if we try to evaluate a scoped function block after an eval statement. If I remove the first line (eval line), JSC works as expected.
If we declare a function using eval method, JSC does note redeclare this function if it is a scoped block function

=====
BUG #27 (FIXED)

Date reported:

Type: Assertion failure

URLs: https://bugs.webkit.org/show_bug.cgi?id=188378

Original: jsfuzz/seeds/JerryJS/regression/date-utc.js

Fuzzed: None

Patch: None

Pattern:
-------------JavaScriptCore
-------------Chakra
Error: Test failed
-------------SpiderMonkey
Error: Test failed
-------------v8
Error: Test failed

Explanation:
According to ES6 specs, the Year param is required in function Date.UTC, the others params are optional. JavascriptCore returns NaN if only the Year param is passed.

=====
BUG #26 (FIXED)

Date reported:

Type: Assertion failure

URLs: https://github.com/Microsoft/ChakraCore/issues/5576

Original: jsfuzz/seeds/JerryJS/regression/regression-test-issue-1387.js

Fuzzed: None

Patch: None

Pattern:
-------------JavaScriptCore
TypeError: Attempted to assign to readonly property.
-------------Chakra
-------------SpiderMonkey
TypeError: cannot declare global binding `undefined': property must be configurable or both writable and enumerable
-------------v8
SyntaxError: Identifier 'undefined' has already been declared

Explanation:
Chakra should not redeclare global binding “undefined”

=====
BUG #25 (FIXED)

Date reported:

Type: Assertion failure

URLs: https://github.com/Microsoft/ChakraCore/issues/5549

Original: jsfuzz/seeds/test262/built-ins/TypedArrayConstructors/internals/DefineOwnProperty/key-is-numericindex-desc-not-writable.js

Fuzzed: None

Patch: None

Pattern:
-------------JavaScriptCore
-------------Chakra
TypeError: Cannot redefine non-configurable property '0'
-------------SpiderMonkey
-------------v8

Explanation:
According to es6 specs (9.4.5.3) it is possible define a property key if it is a numeric index, Chakra throws a TypeError instead.

=====
BUG #24 (NEW)

Date reported:

Type: Assertion failure

URLs: https://bugs.webkit.org/show_bug.cgi?id=187777

Original: jsfuzz/seeds/JerryJS/regression/array-prototype-push.js

Fuzzed: None

Patch: None

Pattern:
-------------JavaScriptCore
-------------Chakra
Error: Test failed
-------------SpiderMonkey
Error: Test failed
-------------v8
Error: Test failed

Explanation:
We found an inconsistency on JSC when we try to push a new element into an Object that uses Array.prototype.push method. Seems like a conversion ToUint32 on JSC while the others engines exceed this value. In addiction, it was observed that JSC push the element in index 0 and index length-1.

=====
BUG #23 (FIXED)

Date reported:

Type: Parser error

URLs: https://github.com/Microsoft/ChakraCore/issues/5478

Original: jsfuzz/seeds/mozilla/non262/expressions/trailing_comma_arrow.js

Fuzzed: None

Patch: None

Pattern:
-------------JavaScriptCore
-------------Chakra
Error: Syntax error
-------------SpiderMonkey
-------------v8

Explanation:
Chakra should eval function with comma after params. It was observed that the issue appears on trailing comma in an arrow function.

=====
BUG #22 (CONFIRMED)

Date reported: July 10, 2018

Type: Assertion failure

URLs: https://github.com/Microsoft/ChakraCore/issues/5442

Original: DukTape/ecmascript/test-bi-date-timeclip-zero.js

Fuzzed: ./seeds/quickfuzz/ecma_edited/test_3183201ee05ec7573387939c7e48ba88.js

Patch: None

Pattern:
-------------JavaScriptCore
-------------Chakra
Error: Test failed
-------------SpiderMonkey
-------------v8

Explanation:
Date(-0) should be converted to Date(0), using date.getTime() Chakra is the only that
returns -0, causing an assertion failure.


=====
BUG #21 (CONFIRMED)

Date reported: July 10, 2018

Type: Assertion failure

URLs: https://github.com/Microsoft/ChakraCore/issues/5443

Original: jsfuzz/seeds/DukTape/ecmascript/test-bi-date-timeclip-zero.js

Fuzzed: ./seeds/quickfuzz2/ecma_edited/test_86fa37f728125aa1ef258a192560e0e6.js

Patch:None

Pattern:
-------------JavaScriptCore
Error: null
-------------Chakra
-------------SpiderMonkey
Error: null
-------------v8
Error: null

Explanation:
Inconsistence on Error() with more than one argument.
According to ES6 Error constructor the Error is called with only one argument (message).
The other engines returns the first argument, chakra returns the second argument.

=====
BUG #20 (FIXED)

Date reported: July 10, 2018

Type: Assertion failure

URLs: https://bugs.webkit.org/show_bug.cgi?id=187520

Original: jsfuzz/seeds/JerryJS/ecma$ code 22.02.01-021.js

Fuzzed: ./seeds/quickfuzz2/ecma/test_33e9a90bb4616578222d07862c1d1b9c.js (not fuzzed)

Patch: None

Pattern:
-------------JavaScriptCore
Error: Test failed
-------------Chakra
-------------SpiderMonkey
-------------v8

Explanation:
Inconsistence in jsc when we try to get an invalid property in a TypedArray, 
in this case a Float32Array.
hasOwnProperty returns true for out of bounds property index on TypedArray

=======
BUG #19 (CONFIRMED)

Date reported:June 28, 2018

Type: Assertion failure

Priority: HIGH

URL: https://github.com/Microsoft/ChakraCore/issues/5388

Original:

Fuzzed: None

Patch:

pattern:
-------------JavaScriptCore
-------------Chakra
Error: Test failed
-------------SpiderMonkey
-------------v8

Explanation:
When a regex pattern is called the property 'lastIndex' should be updated 
with the last ocurrence of the pattern match. 
Chakra just checks the 'lastIndex' property on the beginning.

======
BUG #18 (FIXED)

Date reported:June 26, 2018

Type: Assertion failure

Priority: HIGH

URL:https://bugs.webkit.org/show_bug.cgi?id=187042

Original:
./jsfuzz/seeds/JerryJS/regression/regexp-non-capture-groups.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_JerryJS_regression_edited_regexp-non-capture-groups.js

Patch:
--- ./jsfuzz/bugs/fuzzed_files/fuzzed_JerryJS_regression_edited_regexp-non-capture-groups.js
+++ .jsfuzz/seeds/JerryJS/regression/regexp-non-capture-groups.js
@@ -111,7 +110,7 @@
 r = new RegExp ("(?:a|b){1,4}");
 assert (r.exec ("bbb") == "bbb");
 
-r = new RegExp ("(?:a|b){1,4}");
+r = new RegExp ("(?:a|b){1,5}");
 assert (r.exec ("abab") == "abab");
 
 r = new RegExp ("(?:aba)*");
@@ -190,8 +189,8 @@
 r = new RegExp ("(?:(?:bb?)*)*bbb\\Ba");
 assert (r.exec ("bbba") == "bbba");
 
-r = new RegExp ("(?:a??){0,109}a");
+r = new RegExp ("(?:a??){0,1}a");
 assert (r.exec ("aa") == "aa");
 
-r = new RegExp ("(?:a{0,340282366920938463463374607431768211457}?){0,1}a");
+r = new RegExp ("(?:a{0,1}?){0,1}a");
 assert (r.exec ("aa") == "aa");

pattern:
-------------JavaScriptCore
Error: Test failed
-------------Chakra
-------------SpiderMonkey
-------------v8

Explanation:
RegExp.exec returns wrong value with a long integer quantifier. 
If the quantifier exceeds the MAX_INT value the matcher cannot be solved.

======
BUG #17 (FIXED)

Date reported: May 24, 2018

Type: Assertion failure

Priority: HIGH

URL: https://bugs.webkit.org/show_bug.cgi?id=185943

Original:
./jsfuzz/seeds/WebKit.JSTests.es6/destructuring_trailing_commas_in_iterable_patterns.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_WebKit.JSTests.es6_destructuring_trailing_commas_in_iterable_patterns.js

Patch:
--- ./jsfuzz/seeds/WebKit.JSTests.es6/destructuring_trailing_commas_in_iterable_patterns.js
+++ ./jsfuzz/bugs/fuzzed_files/fuzzed_WebKit.JSTests.es6_destructuring_trailing_commas_in_iterable_patterns.js
@@ -1,10 +1,10 @@
 function test() {
 
 var [a,] = [1];
+return[a,] = [1];
 return a === 1;
       
 }
 
 if (!test())
-    throw new Error("Test failed");
-
+    throw new Error("Test fa󠁵iled");

Pattern:
-------------JavaScriptCore
Error: Test fa󠁵iled
-------------Chakra
-------------SpiderMonkey
-------------v8

Explanation:
JavascriptCore should return destructuring elements with trailing commas in iterable patterns. 
It was observed that javascriptcore have unexpected behaviour when trying to return a destructuring 
list inside a function.

======
BUG #16 (NEW)

Date reported: May 21, 2018

Type: Incosistent treatment/check of pre-conditions

Priority: LOW

URL: https://github.com/Microsoft/ChakraCore/issues/5203

Original:
./jsfuzz/seeds/mozilla/non262/statements/for-in-with-assignments.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_mozilla_non262_statements_for-in-with-assignments.js

Patch: None

Pattern:
-------------JavaScriptCore
-------------Chakra
-------------SpiderMonkey
Error: Test Failed
-------------v8
Error: Test Failed

Explanation:
Chakra and JSC cannot convert Date(-0) to Date(0).

======
BUG #16 (NEW)

Date reported: May 21, 2018

Type: Incosistent treatment/check of pre-conditions

Priority: LOW

URL: https://github.com/Microsoft/ChakraCore/issues/5203

Original:
./jsfuzz/seeds/mozilla/non262/statements/for-in-with-assignments.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_mozilla_non262_statements_for-in-with-assignments.js

Patch: None

Pattern:
-------------JavaScriptCore
-------------Chakra
Error: Syntax error
-------------SpiderMonkey
-------------v8

Explanation:
Chakra should not throw an Exception when use an empty "yield" expression 
in "in" expression. Example "for(var x = yield in {})".

======
BUG #15 (NEW)

Date reported: May 17, 2018

Type: Assertion failure

Priority: HIGH

URLs: https://github.com/Microsoft/ChakraCore/issues/5187

Original:
./jsfuzz/seeds/WebKit.JSTests.microbenchmarks/string-prototype-split-observable-side-effects4.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_WebKit.JSTests.microbenchmarks_string-prototype-split-observable-side-effects4_14_.js

Patch: None

Pattern:
-------------JavaScriptCore
-------------Chakra
Error: Property access󠀡es do not match expectation
-------------SpiderMonkey
-------------v8

Explanation:
According to ES6 documentation, RegExp.prototype.exec property 
can be writable and configurable. All engines can override the property,
Chakra does not support the redeclaration.

======
BUG #14 (FIXED)

Date reported: May 17, 2018

Type: Incosistent treatment/check of pre-conditions

Priority: HIGH

URLs: https://github.com/Microsoft/ChakraCore/issues/5182

Original:
./jsfuzz/seeds/v8.test.benchmarks.data/sunspider/string-validate-input.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_v8.test.benchmarks.data_sunspider_string-validate-input.js

Patch:
--- ./jsfuzz/seeds/v8.test.benchmarks.data/sunspider/string-validate-input.js
+++ ./jsfuzz/bugs/fuzzed_files/fuzzed_v8.test.benchmarks.data_sunspider_string-validate-input.js
@@ -1,6 +1,6 @@
 letters = new Array("a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z");
-numbers = new Array(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26);
-colors  = new Array("FF","CC","99","66","33","00");
+numbers = new Array(1,398300,253,4,5,6,7,8,65545,10,11,12,13,14,15,0,17,18,19,20,21,22,23,24,25,26);
+colors  = new Array("FF","CC","0","66","33","00");
 
 var endResult;
 
@@ -15,7 +15,7 @@
       (k%2)?email=username+"@mac.com":email=username+"(at)mac.com";
 
       // validate the email address
-      var pattern = /^[a-zA-Z0-9\-\._]+@[a-zA-Z0-9\-_]+(\.?[a-zA-Z0-9\-_]*)\.[a-zA-Z]{2,3}$/;
+      var pattern = /^[a-zA-Z0-9\-\._]+@[a-zA-Z0-9\-_]+(\.?[a-zA-Z0-9\-_]*)\.[a-zA-Z]{2,2147483648}$/;
 
       if(pattern.test(email))
       {
@@ -25,6 +25,30 @@
       else
       {
          r = email + " does NOT appear to be a valid email address.";
+         addResult(r);
+      }
+   }
+
+   // make up ZIP codes
+   for (var s=0;s<4000;s++)
+   {
+      var zipGood = true;
+      var zip = makeNumber(4);
+      (s%2)?zip=zip+"xyz":zip=zip.concat("7");
+
+      // validate the zip code
+      for (var i = 0; i < zip.length; i++) {
+          var ch = zip.charAt(i);
+          if (ch < "0" || ch > "9") {
+              zipGood = false;
+              r = zip + " contains letters.";
+              addResult(r);
+          }
+      }
+      if (zipGood && zip.length>5)
+      {
+         zipGood = false;
+         r = zip + " is longer than five characters.";
          addResult(r);
       }
    }


Pattern:
-------------JavaScriptCore
-------------Chakra
Error: Syntax error in regular expression
-------------SpiderMonkey
-------------v8

Explanation:
Chakra does not instate a RegExp object with a pattern that have 
a long number on quantifier prefix. V8, SpiderMonkey and JavaScriptCore
can instantiate and validate the pattern, Chakra throw a SyntaxError.

======
BUG #13 (NEW)

Date reported: May 10, 2018

Type: Test failure

Priority: HIGH

URLs: https://github.com/Microsoft/ChakraCore/issues/5128

Original:
./jsfuzz/seeds/JerryJS/regression/for-parse.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_JerryJS_regression_for-parse.js

Patch: None

Pattern:
-------------JavaScriptCore
-------------Chakra
Error: Test failed
-------------SpiderMonkey
-------------v8

Explanation:
Chakra should throw an Exception when we try to ran a "for" without a statement.
======
BUG #12 (NEW)

Date reported: May 02, 2018

Type: Test failure

Priority: HIGH

URLs
JSCore: https://bugs.webkit.org/show_bug.cgi?id=185208

Original:
./jsfuzz/seeds/mozilla/non262/TypedArray/constructor-iterable-undefined-or-null.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_mozilla_non262_TypedArray_constructor-iterable-undefined-or-null.js

Patch: None

pattern:
-------------JavaScriptCore
Error: Type error
-------------Chakra
-------------SpiderMonkey
-------------v8

Explanation:

According to GetMethod (object, @@iterator) ES6 specification, if the iterator value is either "undefined" or "null", the method should return "undefined", but JSCore does not support this property as "null".

======
BUG #11 (NEW)

Date reported: May 02, 2018

Type: Test failure

Priority: LOW

URLs
JSCore: https://bugs.webkit.org/show_bug.cgi?id=185197

Original:
./jsfuzz/seeds/mozilla/non262/TypedArray/keys.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_mozilla_non262_TypedArray_keys.js

Patch:
--- jsfuzz/seeds/mozilla/non262/TypedArray/keys.js
+++ jsfuzz/bugs/fuzzed_files/fuzzed_mozilla_non262_TypedArray_keys.js
@@ -23,7 +23,7 @@
     }
 
     // Throws if `this` isn't a TypedArray.
-    var invalidReceivers = [undefined, null, 1, false, "", Symbol(), [], {}, /./,
+    var invalidReceivers = [undefined, null, 0, false, "", Symbol(), [], {}, /./,
                             new Proxy(new constructor(), {})];
     invalidReceivers.forEach(invalidReceiver => {
         assertThrowsInstanceOf(() => {

 
Pattern:
-------------JavaScriptCore
Exception: Error: JSFUZZ ERROR: Unsupported function (uneval)
-------------Chakra
-------------SpiderMonkey
-------------v8

Explanation:

According to ES6 specification, the Iterator of a TypedArray.keys() or an Array.keys() should return an object on this order {value: Integer, done: Boolean}.

======
BUG #10 (CONFIRMED)

Date reported: April 30, 2018

Type: Test failure

Priority: HIGH

URLs
JSCore: https://bugs.webkit.org/show_bug.cgi?id=185156
Chakra: https://github.com/Microsoft/ChakraCore/issues/5076

Original:
  ./jsfuzz/seeds/Tiny-js.tests/test039.js

Fuzzed:
  ./jsfuzz/bugs/fuzzed_files/fuzzed_Tiny-js.tests_test039.js

Patch:
--- jsfuzz/seeds/Tiny-js.tests/test039.js
+++ jsfuzz/bugs/fuzzed_files/fuzzed_Tiny-js.tests_test039.js
@@ -8,6 +8,7 @@
 var b = { get_member : function() { return this.member;}, member:41 };
 
 with(b) {
+var a;
   let a = get_member(); //<--- a is local for this block
   var c = a+1;
 }

Pattern:
  -------------JavaScriptCore
  -------------Chakra
  -------------SpiderMonkey
  Error: redeclaration of var a
  -------------v8
  Error: Identifier 'a' has already been declared

Explanation:
  There is an inconsistency when a variable is declared twice as "var" and "let" inside the "with" scope. JScore and Chakra should raise a SyntaxError.

======
BUG #9 (NEW)

Date reported: April 29, 2018

Type: Test failure

Priority: HIGH

URL JSCore: https://bugs.webkit.org/show_bug.cgi?id=185127

Original:
  ./jsfuzz/seeds/JerryJS/jerryjs.ecma/24.01.04-006.js

Fuzzed:
  ./jsfuzz/bugs/fuzzed_files/fuzzed_JerryJS_jerryjs.ecma_24.01.04-006.js

Patch:
  --- jsfuzz/seeds/JerryJS/jerryjs.ecma/24.01.04-006.js
  +++ jsfuzz/bugs/fuzzed_files/fuzzed_JerryJS_jerryjs.ecma_24.01.04-006.js
  
  var a = new ArrayBuffer(5);
  -var b = a.slice (3, 2);
  +var b = a.slice (3, 4294967297);
  if(!(b.byteLength === 0)) throw new Error("Test failed");

Pattern:
  -------------JavaScriptCore
  -------------Chakra
  Error: Test failed
  -------------SpiderMonkey
  Error: Test failed
  -------------v8
  Error: Test failed

Explanation:
  Inconsistence when slicing an ArrayBuffer with a long number.

Expected results: 
  Error: Test failed

Actual results:
  Pass without failures

======
BUG #8 (CONFIRMED)

Date reported: April 29, 2018

Type: Assertion failure

Priority: HIGH

URL Chakra: https://github.com/Microsoft/ChakraCore/issues/5067
URL JSCore: https://bugs.webkit.org/show_bug.cgi?id=185130

Original:
./jsfuzz/seeds/mozilla/non262/lexical-environment/block-scoped-functions-annex-b-with.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_mozilla_non262_lexical-environment_block-scoped-functions-annex-b-with.js

Patch: None

Pattern:
-------------JavaScriptCore
Error: Assertion failed: got "function f() {
-------------Chakra
Error: Assertion failed: got "function f() {
-------------SpiderMonkey

-------------v8

Explanation:
Inconsistence when we try to access an property inside the "with" scope.

Actual result: TypeError: Assertion failed: got "function f() {return "fun-f";}", expected "undefined"
Expected result: pass without failures

======
BUG #7 (CONFIRMED)

Date reported: April 29, 2018

Type: Assertion failure

Priority: HIGH

URLs: https://github.com/Microsoft/ChakraCore/issues/5065

Original:
./jsfuzz/seeds/mozilla/non262/Error/constructor-proto.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_mozilla_non262_Error_constructor-proto.js

Patch: None

Pattern:
-------------JavaScriptCore
-------------Chakra
Error: Assertion failed: got "function() {
-------------SpiderMonkey
-------------v8

Explanation:

According to documentation, Reflect.getPrototypeOf(TypeError) should return the Error prototype.

Actual Result: TypeError: Assertion failed: got "function() {[native code]}", expected "function Error() { [native code] }"
Expected Result: pass without failures

======
BUG #6 (CONFIRMED/FIXED)

Date reported: April 25, 2018

Type: Assertion failure

Priority: HIGH

URLs: https://github.com/Microsoft/ChakraCore/issues/5038

Original:
./jsfuzz/seeds/JerryJS/jerryjs.ecma/11.04.06-028.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_JerryJS_jerryjs.ecma_11.04.06-028.js

Patch:
--- ./jsfuzz/seeds/JerryJS/jerryjs.ecma/11.04.06-028.js
+++ ./jsfuzz/bugs/fuzzed_files/fuzzed_JerryJS_jerryjs.ecma_11.04.06-028.js
@@ -15,7 +15,7 @@
 
 var a = {
   valueOf: function () {
-    return ""
+    return "\x00"
   }
 }
 

Pattern:
-------------JavaScriptCore
Error: Test failed
-------------Chakra
-------------SpiderMonkey
Error: Test failed
-------------v8
Error: Test failed

Explanation:

According to documentation, when we try to evaluate a 
invalid strings using Unary plus, the return should be NaN.

======
BUG #5 (CONFIRMED)

Date reported: April 23, 2018

Type: Should throw TypeError 

Priority: HIGH

URLs: https://github.com/Microsoft/ChakraCore/issues/5033

Original:
./jsfuzz/seeds/mozilla/non262/Array/length-truncate-nonconfigurable-sparse.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_mozilla_non262_Array_length-truncate-nonconfigurable-sparse.js

Patch: None 
 
Pattern:

-------------JavaScriptCore
-------------Chakra
Error: non-configurable property should trigger TypeError operty should trigger TypeError, got Error: didn't throw?!
-------------SpiderMonkey
-------------v8

Explanation:

When we try to fill an array with an object that contains a getter-only property we can't 
set this object property. Chakra should raise a TypeError, but it does not do anything.

====== 
BUG #4 (NEW)

Date reported: April 18, 2018

Type: Access invalid position 

Priority: HIGH

URLs: https://bugs.webkit.org/show_bug.cgi?id=184749

Original:
./jsfuzz/seeds/JerryJS/JerryJS/jerryjs.ecma/22.02.01-009.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_jerryjs_ecma_22.02.01-009.js

Patch: None 
 
Pattern:

-------------JavaScriptCore
Error: Test failed
-------------Chakra
-------------SpiderMonkey
-------------v8

Explanation:

JSCore should returns "undefined" when try to access an item
in position bigger then array size. The others engines 
has passed on this testcase.

======
BUG #3 (NEW)

Date reported: April 14, 2018

Type: Inconsistent assertions violated in test case

Priority: HIGH

URLs: https://bugs.webkit.org/show_bug.cgi?id=184629

Original:
./jsfuzz/seeds/WebKit.JSTests.es6/Proxy_internal_defineProperty_calls_[[Set]].js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_Proxy_internal_defineProperty_calls_[[Set]].js

Patch:
--- ./jsfuzz/seeds/WebKit.JSTests.es6/Proxy_internal_defineProperty_calls_[[Set]].js
+++ ./jsfuzz/bugs/fuzzed_files/fuzzed_Proxy_internal_defineProperty_calls_[[Set]].js
@@ -4,10 +4,267 @@
 var def = [];
 var p = new Proxy({foo:1, bar:2}, { defineProperty: function(o, v, desc) { def.push(v); Object.defineProperty(o, v, desc); return true; }});
 p.foo = 2; p.bar = 4;
+p.foo = 2; p.bar = 4;
+p.foo = 2; p.bar = 4;
 return def + '' === "foo,bar";
       
 }
 
Pattern:

-------------JavaScriptCore
-------------Chakra
Error: Test failed
-------------SpiderMonkey
Error: Test failed
-------------v8
Error: Test failed

Explanation:

JSCore should record all calls to setters "foo" and "bar" (six in
total), whose expected effect is to to store the string
"foo,bar,foo,bar,foo,bar" on variable "def". Therefore, the test
should fail under JSCore as it fails in other engines--return value
should be true as per test assertion. However, JSCore only stores the
first two calls to the setters and the test (incorrectly) passes.

======
BUG #2 (REJECTED - expected behavior)

Date reported: April 12, 2018

Type: Incosistent treatment/check of pre-conditions

Priority: HIGH

URLs: https://github.com/Microsoft/ChakraCore/issues/4979

Original:
./jsfuzz/seeds/WebKit.JSTests.es6/String.prototype_methods_String.prototype.repeat.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_String.prototype_methods_String.prototype.repeat.js

Patch:
--- jsfuzz/seeds/WebKit.JSTests.es6/String.prototype_methods_String.prototype.repeat.js
+++ jsfuzz/bugs/fuzzed_files/fuzzed_String.prototype_methods_String.prototype.repeat.js
@@ -1,7 +1,7 @@
 function test() {
 
 return typeof String.prototype.repeat === 'function'
-  && "foo".repeat(3) === "foofoofoo";
+  && "foo".repeat(657604378) === "foofoofoo";
       
 }
 
Pattern:
-------------JavaScriptCore
Error: TIMEOUT
-------------Chakra
Error: Core Dump
-------------SpiderMonkey
Error: repeat count must be less than infinity and not overflow maximum string size
-------------v8
Error: Invalid string length

Explanation:

Chakra should raise an exception when passing a long number to the
string function repeat. Instead, it crashes with a segmentation fault.

======
BUG #1 (CONFIRMED/FIXED)

Date reported: April 12, 2018

Type: Incosistent treatment/check of pre-conditions

Priority: LOW

URLs: https://github.com/Microsoft/ChakraCore/issues/4978

Original:
./jsfuzz/seeds/WebKit.JSTests.es6/typed_arrays_DataView_Int8.js

Fuzzed:
./jsfuzz/bugs/fuzzed_files/fuzzed_typed_arrays_DataView_Int8.js

Patch:
--- ./jsfuzz/seeds/WebKit.JSTests.es6/typed_arrays_DataView_Int8.js
+++ ./jsfuzz/bugs/fuzzed_files/fuzzed_typed_arrays_DataView_Int8.js
@@ -3,7 +3,7 @@
 var buffer = new ArrayBuffer(64);
 var view = new DataView(buffer);
 view.setInt8 (0, 0x80);
-return view.getInt8(0) === -0x80;
+return view.getInt8(-1770523502845470856862803727694) === -0x80;
       
 }
 
Pattern:
-------------JavaScriptCore
Error: byteOffset cannot be negative
-------------Chakra
-------------SpiderMonkey
Error: invalid or out-of-range index
-------------v8
Error: Offset is outside the bounds of the DataView

Explanation:

This test passes on Chakra but it should fail. Chakra always returns
-128 when calling view.getInt8 with a long negative number. Note that
-128 corresponds to the hexadecimal -0x80.
