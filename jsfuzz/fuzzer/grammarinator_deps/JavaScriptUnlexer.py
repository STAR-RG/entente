# Generated by Grammarinator 17.7

from itertools import chain
from grammarinator.runtime import *

charset_0 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11),(13, 14),(8232, 8233),(8233, 8234)])))
charset_1 = list(chain(range(48, 58)))
charset_2 = list(chain(range(48, 58)))
charset_3 = list(chain(range(120, 121), range(88, 89)))
charset_4 = list(chain(range(48, 56)))
charset_5 = list(chain(range(111, 112), range(79, 80)))
charset_6 = list(chain(range(48, 56)))
charset_7 = list(chain(range(98, 99), range(66, 67)))
charset_8 = list(chain(range(48, 49), range(49, 50)))
charset_9 = list(chain(*multirange_diff(printable_unicode_ranges, [(96, 97)])))
charset_10 = list(chain(range(9, 10), range(11, 12), range(12, 13), range(32, 33), range(160, 161)))
charset_11 = list(chain(range(13, 14), range(10, 11), range(8232, 8233), range(8233, 8234)))
charset_12 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11),(13, 14),(34, 35),(92, 93)])))
charset_13 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11),(13, 14),(39, 40),(92, 93)])))
charset_14 = list(chain(range(39, 40), range(34, 35), range(92, 93), range(98, 99), range(102, 103), range(110, 111), range(114, 115), range(116, 117), range(118, 119)))
charset_15 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11),(13, 14),(34, 35),(39, 40),(48, 58),(92, 93),(98, 99),(102, 103),(110, 111),(114, 115),(116, 117),(117, 118),(118, 119),(120, 121)])))
charset_16 = list(chain(range(48, 58)))
charset_17 = list(chain(range(120, 121), range(117, 118)))
charset_18 = list(chain(range(13, 14), range(10, 11), range(8232, 8233), range(8233, 8234)))
charset_19 = list(chain(range(48, 58), range(97, 103), range(65, 71)))
charset_20 = list(chain(range(49, 58)))
charset_21 = list(chain(range(48, 58)))
charset_22 = list(chain(range(101, 102), range(69, 70)))
charset_23 = list(chain(range(43, 44), range(45, 46)))
charset_24 = list(chain(range(48, 58)))
charset_25 = list(chain(range(36, 37), range(95, 96)))
charset_26 = list(chain(range(65, 91)))
charset_27 = list(chain(range(97, 123)))
charset_28 = list(chain(range(170, 171)))
charset_29 = list(chain(range(181, 182)))
charset_30 = list(chain(range(186, 187)))
charset_31 = list(chain(range(192, 215)))
charset_32 = list(chain(range(216, 247)))
charset_33 = list(chain(range(248, 544)))
charset_34 = list(chain(range(546, 564)))
charset_35 = list(chain(range(592, 686)))
charset_36 = list(chain(range(688, 697)))
charset_37 = list(chain(range(699, 706)))
charset_38 = list(chain(range(720, 722)))
charset_39 = list(chain(range(736, 741)))
charset_40 = list(chain(range(750, 751)))
charset_41 = list(chain(range(890, 891)))
charset_42 = list(chain(range(902, 903)))
charset_43 = list(chain(range(904, 907)))
charset_44 = list(chain(range(908, 909)))
charset_45 = list(chain(range(910, 930)))
charset_46 = list(chain(range(931, 975)))
charset_47 = list(chain(range(976, 984)))
charset_48 = list(chain(range(986, 1012)))
charset_49 = list(chain(range(1024, 1154)))
charset_50 = list(chain(range(1164, 1221)))
charset_51 = list(chain(range(1223, 1225)))
charset_52 = list(chain(range(1227, 1229)))
charset_53 = list(chain(range(1232, 1270)))
charset_54 = list(chain(range(1272, 1274)))
charset_55 = list(chain(range(1329, 1367)))
charset_56 = list(chain(range(1369, 1370)))
charset_57 = list(chain(range(1377, 1416)))
charset_58 = list(chain(range(1488, 1515)))
charset_59 = list(chain(range(1520, 1523)))
charset_60 = list(chain(range(1569, 1595)))
charset_61 = list(chain(range(1600, 1611)))
charset_62 = list(chain(range(1649, 1748)))
charset_63 = list(chain(range(1749, 1750)))
charset_64 = list(chain(range(1765, 1767)))
charset_65 = list(chain(range(1786, 1789)))
charset_66 = list(chain(range(1808, 1809)))
charset_67 = list(chain(range(1810, 1837)))
charset_68 = list(chain(range(1920, 1958)))
charset_69 = list(chain(range(2309, 2362)))
charset_70 = list(chain(range(2365, 2366)))
charset_71 = list(chain(range(2384, 2385)))
charset_72 = list(chain(range(2392, 2402)))
charset_73 = list(chain(range(2437, 2445)))
charset_74 = list(chain(range(2447, 2449)))
charset_75 = list(chain(range(2451, 2473)))
charset_76 = list(chain(range(2474, 2481)))
charset_77 = list(chain(range(2482, 2483)))
charset_78 = list(chain(range(2486, 2490)))
charset_79 = list(chain(range(2524, 2526)))
charset_80 = list(chain(range(2527, 2530)))
charset_81 = list(chain(range(2544, 2546)))
charset_82 = list(chain(range(2565, 2571)))
charset_83 = list(chain(range(2575, 2577)))
charset_84 = list(chain(range(2579, 2601)))
charset_85 = list(chain(range(2602, 2609)))
charset_86 = list(chain(range(2610, 2612)))
charset_87 = list(chain(range(2613, 2615)))
charset_88 = list(chain(range(2616, 2618)))
charset_89 = list(chain(range(2649, 2653)))
charset_90 = list(chain(range(2654, 2655)))
charset_91 = list(chain(range(2674, 2677)))
charset_92 = list(chain(range(2693, 2700)))
charset_93 = list(chain(range(2701, 2702)))
charset_94 = list(chain(range(2703, 2706)))
charset_95 = list(chain(range(2707, 2729)))
charset_96 = list(chain(range(2730, 2737)))
charset_97 = list(chain(range(2738, 2740)))
charset_98 = list(chain(range(2741, 2746)))
charset_99 = list(chain(range(2749, 2750)))
charset_100 = list(chain(range(2768, 2769)))
charset_101 = list(chain(range(2784, 2785)))
charset_102 = list(chain(range(2821, 2829)))
charset_103 = list(chain(range(2831, 2833)))
charset_104 = list(chain(range(2835, 2857)))
charset_105 = list(chain(range(2858, 2865)))
charset_106 = list(chain(range(2866, 2868)))
charset_107 = list(chain(range(2870, 2874)))
charset_108 = list(chain(range(2877, 2878)))
charset_109 = list(chain(range(2908, 2910)))
charset_110 = list(chain(range(2911, 2914)))
charset_111 = list(chain(range(2949, 2955)))
charset_112 = list(chain(range(2958, 2961)))
charset_113 = list(chain(range(2962, 2966)))
charset_114 = list(chain(range(2969, 2971)))
charset_115 = list(chain(range(2972, 2973)))
charset_116 = list(chain(range(2974, 2976)))
charset_117 = list(chain(range(2979, 2981)))
charset_118 = list(chain(range(2984, 2987)))
charset_119 = list(chain(range(2990, 2998)))
charset_120 = list(chain(range(2999, 3002)))
charset_121 = list(chain(range(3077, 3085)))
charset_122 = list(chain(range(3086, 3089)))
charset_123 = list(chain(range(3090, 3113)))
charset_124 = list(chain(range(3114, 3124)))
charset_125 = list(chain(range(3125, 3130)))
charset_126 = list(chain(range(3168, 3170)))
charset_127 = list(chain(range(3205, 3213)))
charset_128 = list(chain(range(3214, 3217)))
charset_129 = list(chain(range(3218, 3241)))
charset_130 = list(chain(range(3242, 3252)))
charset_131 = list(chain(range(3253, 3258)))
charset_132 = list(chain(range(3294, 3295)))
charset_133 = list(chain(range(3296, 3298)))
charset_134 = list(chain(range(3333, 3341)))
charset_135 = list(chain(range(3342, 3345)))
charset_136 = list(chain(range(3346, 3369)))
charset_137 = list(chain(range(3370, 3386)))
charset_138 = list(chain(range(3424, 3426)))
charset_139 = list(chain(range(3461, 3479)))
charset_140 = list(chain(range(3482, 3506)))
charset_141 = list(chain(range(3507, 3516)))
charset_142 = list(chain(range(3517, 3518)))
charset_143 = list(chain(range(3520, 3527)))
charset_144 = list(chain(range(3585, 3633)))
charset_145 = list(chain(range(3634, 3636)))
charset_146 = list(chain(range(3648, 3655)))
charset_147 = list(chain(range(3713, 3715)))
charset_148 = list(chain(range(3716, 3717)))
charset_149 = list(chain(range(3719, 3721)))
charset_150 = list(chain(range(3722, 3723)))
charset_151 = list(chain(range(3725, 3726)))
charset_152 = list(chain(range(3732, 3736)))
charset_153 = list(chain(range(3737, 3744)))
charset_154 = list(chain(range(3745, 3748)))
charset_155 = list(chain(range(3749, 3750)))
charset_156 = list(chain(range(3751, 3752)))
charset_157 = list(chain(range(3754, 3756)))
charset_158 = list(chain(range(3757, 3761)))
charset_159 = list(chain(range(3762, 3764)))
charset_160 = list(chain(range(3773, 3781)))
charset_161 = list(chain(range(3782, 3783)))
charset_162 = list(chain(range(3804, 3806)))
charset_163 = list(chain(range(3840, 3841)))
charset_164 = list(chain(range(3904, 3947)))
charset_165 = list(chain(range(3976, 3980)))
charset_166 = list(chain(range(4096, 4130)))
charset_167 = list(chain(range(4131, 4136)))
charset_168 = list(chain(range(4137, 4139)))
charset_169 = list(chain(range(4176, 4182)))
charset_170 = list(chain(range(4256, 4294)))
charset_171 = list(chain(range(4304, 4343)))
charset_172 = list(chain(range(4352, 4442)))
charset_173 = list(chain(range(4447, 4515)))
charset_174 = list(chain(range(4520, 4602)))
charset_175 = list(chain(range(4608, 4615)))
charset_176 = list(chain(range(4616, 4679)))
charset_177 = list(chain(range(4680, 4681)))
charset_178 = list(chain(range(4682, 4686)))
charset_179 = list(chain(range(4688, 4695)))
charset_180 = list(chain(range(4696, 4697)))
charset_181 = list(chain(range(4698, 4702)))
charset_182 = list(chain(range(4704, 4743)))
charset_183 = list(chain(range(4744, 4745)))
charset_184 = list(chain(range(4746, 4750)))
charset_185 = list(chain(range(4752, 4783)))
charset_186 = list(chain(range(4784, 4785)))
charset_187 = list(chain(range(4786, 4790)))
charset_188 = list(chain(range(4792, 4799)))
charset_189 = list(chain(range(4800, 4801)))
charset_190 = list(chain(range(4802, 4806)))
charset_191 = list(chain(range(4808, 4815)))
charset_192 = list(chain(range(4816, 4823)))
charset_193 = list(chain(range(4824, 4847)))
charset_194 = list(chain(range(4848, 4879)))
charset_195 = list(chain(range(4880, 4881)))
charset_196 = list(chain(range(4882, 4886)))
charset_197 = list(chain(range(4888, 4895)))
charset_198 = list(chain(range(4896, 4935)))
charset_199 = list(chain(range(4936, 4955)))
charset_200 = list(chain(range(5024, 5041)))
charset_201 = list(chain(range(5041, 5109)))
charset_202 = list(chain(range(5121, 5751)))
charset_203 = list(chain(range(5761, 5787)))
charset_204 = list(chain(range(5792, 5867)))
charset_205 = list(chain(range(6016, 6068)))
charset_206 = list(chain(range(6176, 6264)))
charset_207 = list(chain(range(6272, 6313)))
charset_208 = list(chain(range(7680, 7836)))
charset_209 = list(chain(range(7840, 7905)))
charset_210 = list(chain(range(7905, 7930)))
charset_211 = list(chain(range(7936, 7958)))
charset_212 = list(chain(range(7960, 7966)))
charset_213 = list(chain(range(7968, 7994)))
charset_214 = list(chain(range(7994, 8006)))
charset_215 = list(chain(range(8008, 8014)))
charset_216 = list(chain(range(8016, 8024)))
charset_217 = list(chain(range(8025, 8026)))
charset_218 = list(chain(range(8027, 8028)))
charset_219 = list(chain(range(8029, 8030)))
charset_220 = list(chain(range(8031, 8062)))
charset_221 = list(chain(range(8064, 8117)))
charset_222 = list(chain(range(8118, 8125)))
charset_223 = list(chain(range(8126, 8127)))
charset_224 = list(chain(range(8130, 8133)))
charset_225 = list(chain(range(8134, 8141)))
charset_226 = list(chain(range(8144, 8148)))
charset_227 = list(chain(range(8150, 8156)))
charset_228 = list(chain(range(8160, 8173)))
charset_229 = list(chain(range(8178, 8181)))
charset_230 = list(chain(range(8182, 8189)))
charset_231 = list(chain(range(8319, 8320)))
charset_232 = list(chain(range(8450, 8451)))
charset_233 = list(chain(range(8455, 8456)))
charset_234 = list(chain(range(8458, 8468)))
charset_235 = list(chain(range(8469, 8470)))
charset_236 = list(chain(range(8473, 8478)))
charset_237 = list(chain(range(8484, 8485)))
charset_238 = list(chain(range(8486, 8487)))
charset_239 = list(chain(range(8488, 8489)))
charset_240 = list(chain(range(8490, 8494)))
charset_241 = list(chain(range(8495, 8498)))
charset_242 = list(chain(range(8499, 8506)))
charset_243 = list(chain(range(8544, 8580)))
charset_244 = list(chain(range(12293, 12296)))
charset_245 = list(chain(range(12321, 12330)))
charset_246 = list(chain(range(12337, 12342)))
charset_247 = list(chain(range(12344, 12347)))
charset_248 = list(chain(range(12353, 12437)))
charset_249 = list(chain(range(12445, 12447)))
charset_250 = list(chain(range(12449, 12539)))
charset_251 = list(chain(range(12540, 12543)))
charset_252 = list(chain(range(12549, 12589)))
charset_253 = list(chain(range(12593, 12687)))
charset_254 = list(chain(range(12704, 12728)))
charset_255 = list(chain(range(13312, 13313)))
charset_256 = list(chain(range(19893, 19894)))
charset_257 = list(chain(range(19968, 19969)))
charset_258 = list(chain(range(40869, 40870)))
charset_259 = list(chain(range(40960, 42125)))
charset_260 = list(chain(range(44032, 44033)))
charset_261 = list(chain(range(55203, 55204)))
charset_262 = list(chain(range(63744, 64046)))
charset_263 = list(chain(range(64256, 64263)))
charset_264 = list(chain(range(64275, 64280)))
charset_265 = list(chain(range(64285, 64286)))
charset_266 = list(chain(range(64287, 64297)))
charset_267 = list(chain(range(64298, 64311)))
charset_268 = list(chain(range(64312, 64317)))
charset_269 = list(chain(range(64318, 64319)))
charset_270 = list(chain(range(64320, 64322)))
charset_271 = list(chain(range(64323, 64325)))
charset_272 = list(chain(range(64326, 64434)))
charset_273 = list(chain(range(64467, 64830)))
charset_274 = list(chain(range(64848, 64912)))
charset_275 = list(chain(range(64914, 64968)))
charset_276 = list(chain(range(65008, 65020)))
charset_277 = list(chain(range(65136, 65139)))
charset_278 = list(chain(range(65140, 65141)))
charset_279 = list(chain(range(65142, 65277)))
charset_280 = list(chain(range(65313, 65339)))
charset_281 = list(chain(range(65345, 65371)))
charset_282 = list(chain(range(65382, 65471)))
charset_283 = list(chain(range(65474, 65480)))
charset_284 = list(chain(range(65482, 65488)))
charset_285 = list(chain(range(65490, 65496)))
charset_286 = list(chain(range(65498, 65501)))
charset_287 = list(chain(range(768, 847)))
charset_288 = list(chain(range(864, 867)))
charset_289 = list(chain(range(1155, 1159)))
charset_290 = list(chain(range(1425, 1442)))
charset_291 = list(chain(range(1443, 1466)))
charset_292 = list(chain(range(1467, 1470)))
charset_293 = list(chain(range(1471, 1472)))
charset_294 = list(chain(range(1473, 1475)))
charset_295 = list(chain(range(1476, 1477)))
charset_296 = list(chain(range(1611, 1622)))
charset_297 = list(chain(range(1648, 1649)))
charset_298 = list(chain(range(1750, 1757)))
charset_299 = list(chain(range(1759, 1765)))
charset_300 = list(chain(range(1767, 1769)))
charset_301 = list(chain(range(1770, 1774)))
charset_302 = list(chain(range(1809, 1810)))
charset_303 = list(chain(range(1840, 1867)))
charset_304 = list(chain(range(1958, 1969)))
charset_305 = list(chain(range(2305, 2308)))
charset_306 = list(chain(range(2364, 2365)))
charset_307 = list(chain(range(2366, 2382)))
charset_308 = list(chain(range(2385, 2389)))
charset_309 = list(chain(range(2402, 2404)))
charset_310 = list(chain(range(2433, 2436)))
charset_311 = list(chain(range(2492, 2501)))
charset_312 = list(chain(range(2503, 2505)))
charset_313 = list(chain(range(2507, 2510)))
charset_314 = list(chain(range(2519, 2520)))
charset_315 = list(chain(range(2530, 2532)))
charset_316 = list(chain(range(2562, 2563)))
charset_317 = list(chain(range(2620, 2621)))
charset_318 = list(chain(range(2622, 2627)))
charset_319 = list(chain(range(2631, 2633)))
charset_320 = list(chain(range(2635, 2638)))
charset_321 = list(chain(range(2672, 2674)))
charset_322 = list(chain(range(2689, 2692)))
charset_323 = list(chain(range(2748, 2749)))
charset_324 = list(chain(range(2750, 2758)))
charset_325 = list(chain(range(2759, 2762)))
charset_326 = list(chain(range(2763, 2766)))
charset_327 = list(chain(range(2817, 2820)))
charset_328 = list(chain(range(2876, 2877)))
charset_329 = list(chain(range(2878, 2884)))
charset_330 = list(chain(range(2887, 2889)))
charset_331 = list(chain(range(2891, 2894)))
charset_332 = list(chain(range(2902, 2904)))
charset_333 = list(chain(range(2946, 2948)))
charset_334 = list(chain(range(3006, 3011)))
charset_335 = list(chain(range(3014, 3017)))
charset_336 = list(chain(range(3018, 3022)))
charset_337 = list(chain(range(3031, 3032)))
charset_338 = list(chain(range(3073, 3076)))
charset_339 = list(chain(range(3134, 3141)))
charset_340 = list(chain(range(3142, 3145)))
charset_341 = list(chain(range(3146, 3150)))
charset_342 = list(chain(range(3157, 3159)))
charset_343 = list(chain(range(3202, 3204)))
charset_344 = list(chain(range(3262, 3269)))
charset_345 = list(chain(range(3270, 3273)))
charset_346 = list(chain(range(3274, 3278)))
charset_347 = list(chain(range(3285, 3287)))
charset_348 = list(chain(range(3330, 3332)))
charset_349 = list(chain(range(3390, 3396)))
charset_350 = list(chain(range(3398, 3401)))
charset_351 = list(chain(range(3402, 3406)))
charset_352 = list(chain(range(3415, 3416)))
charset_353 = list(chain(range(3458, 3460)))
charset_354 = list(chain(range(3530, 3531)))
charset_355 = list(chain(range(3535, 3541)))
charset_356 = list(chain(range(3542, 3543)))
charset_357 = list(chain(range(3544, 3552)))
charset_358 = list(chain(range(3570, 3572)))
charset_359 = list(chain(range(3633, 3634)))
charset_360 = list(chain(range(3636, 3643)))
charset_361 = list(chain(range(3655, 3663)))
charset_362 = list(chain(range(3761, 3762)))
charset_363 = list(chain(range(3764, 3770)))
charset_364 = list(chain(range(3771, 3773)))
charset_365 = list(chain(range(3784, 3790)))
charset_366 = list(chain(range(3864, 3866)))
charset_367 = list(chain(range(3893, 3894)))
charset_368 = list(chain(range(3895, 3896)))
charset_369 = list(chain(range(3897, 3898)))
charset_370 = list(chain(range(3902, 3904)))
charset_371 = list(chain(range(3953, 3973)))
charset_372 = list(chain(range(3974, 3976)))
charset_373 = list(chain(range(3984, 3992)))
charset_374 = list(chain(range(3993, 4029)))
charset_375 = list(chain(range(4038, 4039)))
charset_376 = list(chain(range(4140, 4147)))
charset_377 = list(chain(range(4150, 4154)))
charset_378 = list(chain(range(4182, 4186)))
charset_379 = list(chain(range(6068, 6100)))
charset_380 = list(chain(range(6313, 6314)))
charset_381 = list(chain(range(8400, 8413)))
charset_382 = list(chain(range(8417, 8418)))
charset_383 = list(chain(range(12330, 12336)))
charset_384 = list(chain(range(12441, 12443)))
charset_385 = list(chain(range(64286, 64287)))
charset_386 = list(chain(range(65056, 65060)))
charset_387 = list(chain(range(48, 58)))
charset_388 = list(chain(range(1632, 1642)))
charset_389 = list(chain(range(1776, 1786)))
charset_390 = list(chain(range(2406, 2416)))
charset_391 = list(chain(range(2534, 2544)))
charset_392 = list(chain(range(2662, 2672)))
charset_393 = list(chain(range(2790, 2800)))
charset_394 = list(chain(range(2918, 2928)))
charset_395 = list(chain(range(3047, 3056)))
charset_396 = list(chain(range(3174, 3184)))
charset_397 = list(chain(range(3302, 3312)))
charset_398 = list(chain(range(3430, 3440)))
charset_399 = list(chain(range(3664, 3674)))
charset_400 = list(chain(range(3792, 3802)))
charset_401 = list(chain(range(3872, 3882)))
charset_402 = list(chain(range(4160, 4170)))
charset_403 = list(chain(range(4969, 4978)))
charset_404 = list(chain(range(6112, 6122)))
charset_405 = list(chain(range(6160, 6170)))
charset_406 = list(chain(range(65296, 65306)))
charset_407 = list(chain(range(95, 96)))
charset_408 = list(chain(range(8255, 8257)))
charset_409 = list(chain(range(12539, 12540)))
charset_410 = list(chain(range(65075, 65077)))
charset_411 = list(chain(range(65101, 65104)))
charset_412 = list(chain(range(65343, 65344)))
charset_413 = list(chain(range(65381, 65382)))
charset_414 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11),(13, 14),(47, 48),(91, 92),(92, 93),(8232, 8233),(8233, 8234)])))
charset_415 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11),(13, 14),(92, 93),(92, 93),(93, 94),(8232, 8233),(8233, 8234)])))
charset_416 = list(chain(*multirange_diff(printable_unicode_ranges, [(10, 11),(13, 14),(8232, 8233),(8233, 8234)])))


class JavaScriptUnlexer(Grammarinator):

    def __init__(self, *, max_depth=float('inf')):
        super(JavaScriptUnlexer, self).__init__()
        self.unlexer = self
        self.max_depth = max_depth
        self.set_options()

    def EOF(self, *args, **kwargs):
        pass

    def set_options(self):
        self.options = dict(superClass="JavaScriptBaseLexer")

    @depthcontrol
    def MultiLineComment(self):
        current = self.create_node(UnlexerRule(name='MultiLineComment'))
        current += self.create_node(UnlexerRule(src='/*'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.any_char())

        current += self.create_node(UnlexerRule(src='*/'))
        return current
    MultiLineComment.min_depth = 0

    @depthcontrol
    def SingleLineComment(self):
        current = self.create_node(UnlexerRule(name='SingleLineComment'))
        current += self.create_node(UnlexerRule(src='//'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.char_from_list(charset_0))

        return current
    SingleLineComment.min_depth = 0

    @depthcontrol
    def RegularExpressionLiteral(self):
        current = self.create_node(UnlexerRule(name='RegularExpressionLiteral'))
        current += self.create_node(UnlexerRule(src='/'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.unlexer.RegularExpressionChar()

        current += self.create_node(UnlexerRule(src='/'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_more():
                current += self.unlexer.IdentifierPart()

        return current
    RegularExpressionLiteral.min_depth = 1

    @depthcontrol
    def OpenBracket(self):
        current = self.create_node(UnlexerRule(name='OpenBracket'))
        current += self.create_node(UnlexerRule(src='['))
        return current
    OpenBracket.min_depth = 0

    @depthcontrol
    def CloseBracket(self):
        current = self.create_node(UnlexerRule(name='CloseBracket'))
        current += self.create_node(UnlexerRule(src=']'))
        return current
    CloseBracket.min_depth = 0

    @depthcontrol
    def OpenParen(self):
        current = self.create_node(UnlexerRule(name='OpenParen'))
        current += self.create_node(UnlexerRule(src='('))
        return current
    OpenParen.min_depth = 0

    @depthcontrol
    def CloseParen(self):
        current = self.create_node(UnlexerRule(name='CloseParen'))
        current += self.create_node(UnlexerRule(src=')'))
        return current
    CloseParen.min_depth = 0

    @depthcontrol
    def OpenBrace(self):
        current = self.create_node(UnlexerRule(name='OpenBrace'))
        current += self.create_node(UnlexerRule(src='{'))
        return current
    OpenBrace.min_depth = 0

    @depthcontrol
    def CloseBrace(self):
        current = self.create_node(UnlexerRule(name='CloseBrace'))
        current += self.create_node(UnlexerRule(src='}'))
        return current
    CloseBrace.min_depth = 0

    @depthcontrol
    def SemiColon(self):
        current = self.create_node(UnlexerRule(name='SemiColon'))
        current += self.create_node(UnlexerRule(src=';'))
        return current
    SemiColon.min_depth = 0

    @depthcontrol
    def Comma(self):
        current = self.create_node(UnlexerRule(name='Comma'))
        current += self.create_node(UnlexerRule(src=','))
        return current
    Comma.min_depth = 0

    @depthcontrol
    def Assign(self):
        current = self.create_node(UnlexerRule(name='Assign'))
        current += self.create_node(UnlexerRule(src='='))
        return current
    Assign.min_depth = 0

    @depthcontrol
    def QuestionMark(self):
        current = self.create_node(UnlexerRule(name='QuestionMark'))
        current += self.create_node(UnlexerRule(src='?'))
        return current
    QuestionMark.min_depth = 0

    @depthcontrol
    def Colon(self):
        current = self.create_node(UnlexerRule(name='Colon'))
        current += self.create_node(UnlexerRule(src=':'))
        return current
    Colon.min_depth = 0

    @depthcontrol
    def Ellipsis(self):
        current = self.create_node(UnlexerRule(name='Ellipsis'))
        current += self.create_node(UnlexerRule(src='...'))
        return current
    Ellipsis.min_depth = 0

    @depthcontrol
    def Dot(self):
        current = self.create_node(UnlexerRule(name='Dot'))
        current += self.create_node(UnlexerRule(src='.'))
        return current
    Dot.min_depth = 0

    @depthcontrol
    def PlusPlus(self):
        current = self.create_node(UnlexerRule(name='PlusPlus'))
        current += self.create_node(UnlexerRule(src='++'))
        return current
    PlusPlus.min_depth = 0

    @depthcontrol
    def MinusMinus(self):
        current = self.create_node(UnlexerRule(name='MinusMinus'))
        current += self.create_node(UnlexerRule(src='--'))
        return current
    MinusMinus.min_depth = 0

    @depthcontrol
    def Plus(self):
        current = self.create_node(UnlexerRule(name='Plus'))
        current += self.create_node(UnlexerRule(src='+'))
        return current
    Plus.min_depth = 0

    @depthcontrol
    def Minus(self):
        current = self.create_node(UnlexerRule(name='Minus'))
        current += self.create_node(UnlexerRule(src='-'))
        return current
    Minus.min_depth = 0

    @depthcontrol
    def BitNot(self):
        current = self.create_node(UnlexerRule(name='BitNot'))
        current += self.create_node(UnlexerRule(src='~'))
        return current
    BitNot.min_depth = 0

    @depthcontrol
    def Not(self):
        current = self.create_node(UnlexerRule(name='Not'))
        current += self.create_node(UnlexerRule(src='!'))
        return current
    Not.min_depth = 0

    @depthcontrol
    def Multiply(self):
        current = self.create_node(UnlexerRule(name='Multiply'))
        current += self.create_node(UnlexerRule(src='*'))
        return current
    Multiply.min_depth = 0

    @depthcontrol
    def Divide(self):
        current = self.create_node(UnlexerRule(name='Divide'))
        current += self.create_node(UnlexerRule(src='/'))
        return current
    Divide.min_depth = 0

    @depthcontrol
    def Modulus(self):
        current = self.create_node(UnlexerRule(name='Modulus'))
        current += self.create_node(UnlexerRule(src='%'))
        return current
    Modulus.min_depth = 0

    @depthcontrol
    def RightShiftArithmetic(self):
        current = self.create_node(UnlexerRule(name='RightShiftArithmetic'))
        current += self.create_node(UnlexerRule(src='>>'))
        return current
    RightShiftArithmetic.min_depth = 0

    @depthcontrol
    def LeftShiftArithmetic(self):
        current = self.create_node(UnlexerRule(name='LeftShiftArithmetic'))
        current += self.create_node(UnlexerRule(src='<<'))
        return current
    LeftShiftArithmetic.min_depth = 0

    @depthcontrol
    def RightShiftLogical(self):
        current = self.create_node(UnlexerRule(name='RightShiftLogical'))
        current += self.create_node(UnlexerRule(src='>>>'))
        return current
    RightShiftLogical.min_depth = 0

    @depthcontrol
    def LessThan(self):
        current = self.create_node(UnlexerRule(name='LessThan'))
        current += self.create_node(UnlexerRule(src='<'))
        return current
    LessThan.min_depth = 0

    @depthcontrol
    def MoreThan(self):
        current = self.create_node(UnlexerRule(name='MoreThan'))
        current += self.create_node(UnlexerRule(src='>'))
        return current
    MoreThan.min_depth = 0

    @depthcontrol
    def LessThanEquals(self):
        current = self.create_node(UnlexerRule(name='LessThanEquals'))
        current += self.create_node(UnlexerRule(src='<='))
        return current
    LessThanEquals.min_depth = 0

    @depthcontrol
    def GreaterThanEquals(self):
        current = self.create_node(UnlexerRule(name='GreaterThanEquals'))
        current += self.create_node(UnlexerRule(src='>='))
        return current
    GreaterThanEquals.min_depth = 0

    @depthcontrol
    def Equals_(self):
        current = self.create_node(UnlexerRule(name='Equals_'))
        current += self.create_node(UnlexerRule(src='=='))
        return current
    Equals_.min_depth = 0

    @depthcontrol
    def NotEquals(self):
        current = self.create_node(UnlexerRule(name='NotEquals'))
        current += self.create_node(UnlexerRule(src='!='))
        return current
    NotEquals.min_depth = 0

    @depthcontrol
    def IdentityEquals(self):
        current = self.create_node(UnlexerRule(name='IdentityEquals'))
        current += self.create_node(UnlexerRule(src='==='))
        return current
    IdentityEquals.min_depth = 0

    @depthcontrol
    def IdentityNotEquals(self):
        current = self.create_node(UnlexerRule(name='IdentityNotEquals'))
        current += self.create_node(UnlexerRule(src='!=='))
        return current
    IdentityNotEquals.min_depth = 0

    @depthcontrol
    def BitAnd(self):
        current = self.create_node(UnlexerRule(name='BitAnd'))
        current += self.create_node(UnlexerRule(src='&'))
        return current
    BitAnd.min_depth = 0

    @depthcontrol
    def BitXOr(self):
        current = self.create_node(UnlexerRule(name='BitXOr'))
        current += self.create_node(UnlexerRule(src='^'))
        return current
    BitXOr.min_depth = 0

    @depthcontrol
    def BitOr(self):
        current = self.create_node(UnlexerRule(name='BitOr'))
        current += self.create_node(UnlexerRule(src='|'))
        return current
    BitOr.min_depth = 0

    @depthcontrol
    def And(self):
        current = self.create_node(UnlexerRule(name='And'))
        current += self.create_node(UnlexerRule(src='&&'))
        return current
    And.min_depth = 0

    @depthcontrol
    def Or(self):
        current = self.create_node(UnlexerRule(name='Or'))
        current += self.create_node(UnlexerRule(src='||'))
        return current
    Or.min_depth = 0

    @depthcontrol
    def MultiplyAssign(self):
        current = self.create_node(UnlexerRule(name='MultiplyAssign'))
        current += self.create_node(UnlexerRule(src='*='))
        return current
    MultiplyAssign.min_depth = 0

    @depthcontrol
    def DivideAssign(self):
        current = self.create_node(UnlexerRule(name='DivideAssign'))
        current += self.create_node(UnlexerRule(src='/='))
        return current
    DivideAssign.min_depth = 0

    @depthcontrol
    def ModulusAssign(self):
        current = self.create_node(UnlexerRule(name='ModulusAssign'))
        current += self.create_node(UnlexerRule(src='%='))
        return current
    ModulusAssign.min_depth = 0

    @depthcontrol
    def PlusAssign(self):
        current = self.create_node(UnlexerRule(name='PlusAssign'))
        current += self.create_node(UnlexerRule(src='+='))
        return current
    PlusAssign.min_depth = 0

    @depthcontrol
    def MinusAssign(self):
        current = self.create_node(UnlexerRule(name='MinusAssign'))
        current += self.create_node(UnlexerRule(src='-='))
        return current
    MinusAssign.min_depth = 0

    @depthcontrol
    def LeftShiftArithmeticAssign(self):
        current = self.create_node(UnlexerRule(name='LeftShiftArithmeticAssign'))
        current += self.create_node(UnlexerRule(src='<<='))
        return current
    LeftShiftArithmeticAssign.min_depth = 0

    @depthcontrol
    def RightShiftArithmeticAssign(self):
        current = self.create_node(UnlexerRule(name='RightShiftArithmeticAssign'))
        current += self.create_node(UnlexerRule(src='>>='))
        return current
    RightShiftArithmeticAssign.min_depth = 0

    @depthcontrol
    def RightShiftLogicalAssign(self):
        current = self.create_node(UnlexerRule(name='RightShiftLogicalAssign'))
        current += self.create_node(UnlexerRule(src='>>>='))
        return current
    RightShiftLogicalAssign.min_depth = 0

    @depthcontrol
    def BitAndAssign(self):
        current = self.create_node(UnlexerRule(name='BitAndAssign'))
        current += self.create_node(UnlexerRule(src='&='))
        return current
    BitAndAssign.min_depth = 0

    @depthcontrol
    def BitXorAssign(self):
        current = self.create_node(UnlexerRule(name='BitXorAssign'))
        current += self.create_node(UnlexerRule(src='^='))
        return current
    BitXorAssign.min_depth = 0

    @depthcontrol
    def BitOrAssign(self):
        current = self.create_node(UnlexerRule(name='BitOrAssign'))
        current += self.create_node(UnlexerRule(src='|='))
        return current
    BitOrAssign.min_depth = 0

    @depthcontrol
    def ARROW(self):
        current = self.create_node(UnlexerRule(name='ARROW'))
        current += self.create_node(UnlexerRule(src='=>'))
        return current
    ARROW.min_depth = 0

    @depthcontrol
    def NullLiteral(self):
        current = self.create_node(UnlexerRule(name='NullLiteral'))
        current += self.create_node(UnlexerRule(src='null'))
        return current
    NullLiteral.min_depth = 0

    @depthcontrol
    def BooleanLiteral(self):
        current = self.create_node(UnlexerRule(name='BooleanLiteral'))
        choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            current += self.create_node(UnlexerRule(src='true'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='false'))
        return current
    BooleanLiteral.min_depth = 0

    @depthcontrol
    def DecimalLiteral(self):
        current = self.create_node(UnlexerRule(name='DecimalLiteral'))
        choice = self.choice([0 if [1, 0, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            current += self.unlexer.DecimalIntegerLiteral()
            current += self.create_node(UnlexerRule(src='.'))
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_more():
                    current += self.create_node(UnlexerRule(src=self.char_from_list(charset_1)))

            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.unlexer.ExponentPart()

        elif choice == 1:
            current += self.create_node(UnlexerRule(src='.'))
            if self.unlexer.max_depth >= 0:
                for _ in self.one_or_more():
                    current += self.create_node(UnlexerRule(src=self.char_from_list(charset_2)))

            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.unlexer.ExponentPart()

        elif choice == 2:
            current += self.unlexer.DecimalIntegerLiteral()
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.unlexer.ExponentPart()

        return current
    DecimalLiteral.min_depth = 0

    @depthcontrol
    def HexIntegerLiteral(self):
        current = self.create_node(UnlexerRule(name='HexIntegerLiteral'))
        current += self.create_node(UnlexerRule(src='0'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_3)))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.unlexer.HexDigit()

        return current
    HexIntegerLiteral.min_depth = 1

    @depthcontrol
    def OctalIntegerLiteral(self):
        current = self.create_node(UnlexerRule(name='OctalIntegerLiteral'))
        current += self.create_node(UnlexerRule(src='0'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_4)))

        return current
    OctalIntegerLiteral.min_depth = 0

    @depthcontrol
    def OctalIntegerLiteral2(self):
        current = self.create_node(UnlexerRule(name='OctalIntegerLiteral2'))
        current += self.create_node(UnlexerRule(src='0'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_5)))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_6)))

        return current
    OctalIntegerLiteral2.min_depth = 0

    @depthcontrol
    def BinaryIntegerLiteral(self):
        current = self.create_node(UnlexerRule(name='BinaryIntegerLiteral'))
        current += self.create_node(UnlexerRule(src='0'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_7)))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_8)))

        return current
    BinaryIntegerLiteral.min_depth = 0

    @depthcontrol
    def Break(self):
        current = self.create_node(UnlexerRule(name='Break'))
        current += self.create_node(UnlexerRule(src='break'))
        return current
    Break.min_depth = 0

    @depthcontrol
    def Do(self):
        current = self.create_node(UnlexerRule(name='Do'))
        current += self.create_node(UnlexerRule(src='do'))
        return current
    Do.min_depth = 0

    @depthcontrol
    def Instanceof(self):
        current = self.create_node(UnlexerRule(name='Instanceof'))
        current += self.create_node(UnlexerRule(src='instanceof'))
        return current
    Instanceof.min_depth = 0

    @depthcontrol
    def Typeof(self):
        current = self.create_node(UnlexerRule(name='Typeof'))
        current += self.create_node(UnlexerRule(src='typeof'))
        return current
    Typeof.min_depth = 0

    @depthcontrol
    def Case(self):
        current = self.create_node(UnlexerRule(name='Case'))
        current += self.create_node(UnlexerRule(src='case'))
        return current
    Case.min_depth = 0

    @depthcontrol
    def Else(self):
        current = self.create_node(UnlexerRule(name='Else'))
        current += self.create_node(UnlexerRule(src='else'))
        return current
    Else.min_depth = 0

    @depthcontrol
    def New(self):
        current = self.create_node(UnlexerRule(name='New'))
        current += self.create_node(UnlexerRule(src='new'))
        return current
    New.min_depth = 0

    @depthcontrol
    def Var(self):
        current = self.create_node(UnlexerRule(name='Var'))
        current += self.create_node(UnlexerRule(src='var'))
        return current
    Var.min_depth = 0

    @depthcontrol
    def Catch(self):
        current = self.create_node(UnlexerRule(name='Catch'))
        current += self.create_node(UnlexerRule(src='catch'))
        return current
    Catch.min_depth = 0

    @depthcontrol
    def Finally(self):
        current = self.create_node(UnlexerRule(name='Finally'))
        current += self.create_node(UnlexerRule(src='finally'))
        return current
    Finally.min_depth = 0

    @depthcontrol
    def Return(self):
        current = self.create_node(UnlexerRule(name='Return'))
        current += self.create_node(UnlexerRule(src='return'))
        return current
    Return.min_depth = 0

    @depthcontrol
    def Void(self):
        current = self.create_node(UnlexerRule(name='Void'))
        current += self.create_node(UnlexerRule(src='void'))
        return current
    Void.min_depth = 0

    @depthcontrol
    def Continue(self):
        current = self.create_node(UnlexerRule(name='Continue'))
        current += self.create_node(UnlexerRule(src='continue'))
        return current
    Continue.min_depth = 0

    @depthcontrol
    def For(self):
        current = self.create_node(UnlexerRule(name='For'))
        current += self.create_node(UnlexerRule(src='for'))
        return current
    For.min_depth = 0

    @depthcontrol
    def Switch(self):
        current = self.create_node(UnlexerRule(name='Switch'))
        current += self.create_node(UnlexerRule(src='switch'))
        return current
    Switch.min_depth = 0

    @depthcontrol
    def While(self):
        current = self.create_node(UnlexerRule(name='While'))
        current += self.create_node(UnlexerRule(src='while'))
        return current
    While.min_depth = 0

    @depthcontrol
    def Debugger(self):
        current = self.create_node(UnlexerRule(name='Debugger'))
        current += self.create_node(UnlexerRule(src='debugger'))
        return current
    Debugger.min_depth = 0

    @depthcontrol
    def Function(self):
        current = self.create_node(UnlexerRule(name='Function'))
        current += self.create_node(UnlexerRule(src='function'))
        return current
    Function.min_depth = 0

    @depthcontrol
    def This(self):
        current = self.create_node(UnlexerRule(name='This'))
        current += self.create_node(UnlexerRule(src='this'))
        return current
    This.min_depth = 0

    @depthcontrol
    def With(self):
        current = self.create_node(UnlexerRule(name='With'))
        current += self.create_node(UnlexerRule(src='with'))
        return current
    With.min_depth = 0

    @depthcontrol
    def Default(self):
        current = self.create_node(UnlexerRule(name='Default'))
        current += self.create_node(UnlexerRule(src='default'))
        return current
    Default.min_depth = 0

    @depthcontrol
    def If(self):
        current = self.create_node(UnlexerRule(name='If'))
        current += self.create_node(UnlexerRule(src='if'))
        return current
    If.min_depth = 0

    @depthcontrol
    def Throw(self):
        current = self.create_node(UnlexerRule(name='Throw'))
        current += self.create_node(UnlexerRule(src='throw'))
        return current
    Throw.min_depth = 0

    @depthcontrol
    def Delete(self):
        current = self.create_node(UnlexerRule(name='Delete'))
        current += self.create_node(UnlexerRule(src='delete'))
        return current
    Delete.min_depth = 0

    @depthcontrol
    def In(self):
        current = self.create_node(UnlexerRule(name='In'))
        current += self.create_node(UnlexerRule(src='in'))
        return current
    In.min_depth = 0

    @depthcontrol
    def Try(self):
        current = self.create_node(UnlexerRule(name='Try'))
        current += self.create_node(UnlexerRule(src='try'))
        return current
    Try.min_depth = 0

    @depthcontrol
    def Class(self):
        current = self.create_node(UnlexerRule(name='Class'))
        current += self.create_node(UnlexerRule(src='class'))
        return current
    Class.min_depth = 0

    @depthcontrol
    def Enum(self):
        current = self.create_node(UnlexerRule(name='Enum'))
        current += self.create_node(UnlexerRule(src='enum'))
        return current
    Enum.min_depth = 0

    @depthcontrol
    def Extends(self):
        current = self.create_node(UnlexerRule(name='Extends'))
        current += self.create_node(UnlexerRule(src='extends'))
        return current
    Extends.min_depth = 0

    @depthcontrol
    def Super(self):
        current = self.create_node(UnlexerRule(name='Super'))
        current += self.create_node(UnlexerRule(src='super'))
        return current
    Super.min_depth = 0

    @depthcontrol
    def Const(self):
        current = self.create_node(UnlexerRule(name='Const'))
        current += self.create_node(UnlexerRule(src='const'))
        return current
    Const.min_depth = 0

    @depthcontrol
    def Export(self):
        current = self.create_node(UnlexerRule(name='Export'))
        current += self.create_node(UnlexerRule(src='export'))
        return current
    Export.min_depth = 0

    @depthcontrol
    def Import(self):
        current = self.create_node(UnlexerRule(name='Import'))
        current += self.create_node(UnlexerRule(src='import'))
        return current
    Import.min_depth = 0

    @depthcontrol
    def Implements(self):
        current = self.create_node(UnlexerRule(name='Implements'))
        current += self.create_node(UnlexerRule(src='implements'))
        return current
    Implements.min_depth = 0

    @depthcontrol
    def Let(self):
        current = self.create_node(UnlexerRule(name='Let'))
        current += self.create_node(UnlexerRule(src='let'))
        return current
    Let.min_depth = 0

    @depthcontrol
    def Private(self):
        current = self.create_node(UnlexerRule(name='Private'))
        current += self.create_node(UnlexerRule(src='private'))
        return current
    Private.min_depth = 0

    @depthcontrol
    def Public(self):
        current = self.create_node(UnlexerRule(name='Public'))
        current += self.create_node(UnlexerRule(src='public'))
        return current
    Public.min_depth = 0

    @depthcontrol
    def Interface(self):
        current = self.create_node(UnlexerRule(name='Interface'))
        current += self.create_node(UnlexerRule(src='interface'))
        return current
    Interface.min_depth = 0

    @depthcontrol
    def Package(self):
        current = self.create_node(UnlexerRule(name='Package'))
        current += self.create_node(UnlexerRule(src='package'))
        return current
    Package.min_depth = 0

    @depthcontrol
    def Protected(self):
        current = self.create_node(UnlexerRule(name='Protected'))
        current += self.create_node(UnlexerRule(src='protected'))
        return current
    Protected.min_depth = 0

    @depthcontrol
    def Static(self):
        current = self.create_node(UnlexerRule(name='Static'))
        current += self.create_node(UnlexerRule(src='static'))
        return current
    Static.min_depth = 0

    @depthcontrol
    def Yield(self):
        current = self.create_node(UnlexerRule(name='Yield'))
        current += self.create_node(UnlexerRule(src='yield'))
        return current
    Yield.min_depth = 0

    @depthcontrol
    def Identifier(self):
        current = self.create_node(UnlexerRule(name='Identifier'))
        current += self.unlexer.IdentifierStart()
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_more():
                current += self.unlexer.IdentifierPart()

        return current
    Identifier.min_depth = 1

    @depthcontrol
    def StringLiteral(self):
        current = self.create_node(UnlexerRule(name='StringLiteral'))
        choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            current += self.create_node(UnlexerRule(src='"'))
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_more():
                    current += self.unlexer.DoubleStringCharacter()

            current += self.create_node(UnlexerRule(src='"'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='\''))
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_more():
                    current += self.unlexer.SingleStringCharacter()

            current += self.create_node(UnlexerRule(src='\''))
        return current
    StringLiteral.min_depth = 0

    @depthcontrol
    def TemplateStringLiteral(self):
        current = self.create_node(UnlexerRule(name='TemplateStringLiteral'))
        current += self.create_node(UnlexerRule(src='`'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
                if choice == 0:
                    current += self.create_node(UnlexerRule(src='\\`'))
                elif choice == 1:
                    current += UnlexerRule(src=self.char_from_list(charset_9))

        current += self.create_node(UnlexerRule(src='`'))
        return current
    TemplateStringLiteral.min_depth = 0

    @depthcontrol
    def WhiteSpaces(self):
        current = self.create_node(UnlexerRule(name='WhiteSpaces'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_10)))

        return current
    WhiteSpaces.min_depth = 0

    @depthcontrol
    def LineTerminator(self):
        current = self.create_node(UnlexerRule(name='LineTerminator'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_11)))
        return current
    LineTerminator.min_depth = 0

    @depthcontrol
    def HtmlComment(self):
        current = self.create_node(UnlexerRule(name='HtmlComment'))
        current += self.create_node(UnlexerRule(src='<!--'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.any_char())

        current += self.create_node(UnlexerRule(src='-->'))
        return current
    HtmlComment.min_depth = 0

    @depthcontrol
    def CDataComment(self):
        current = self.create_node(UnlexerRule(name='CDataComment'))
        current += self.create_node(UnlexerRule(src='<![CDATA['))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += UnlexerRule(src=self.any_char())

        current += self.create_node(UnlexerRule(src=']]>'))
        return current
    CDataComment.min_depth = 0

    @depthcontrol
    def UnexpectedCharacter(self):
        current = self.create_node(UnlexerRule(name='UnexpectedCharacter'))
        current += UnlexerRule(src=self.any_char())
        return current
    UnexpectedCharacter.min_depth = 0

    @depthcontrol
    def DoubleStringCharacter(self):
        current = self.create_node(UnlexerRule(name='DoubleStringCharacter'))
        choice = self.choice([0 if [0, 1, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            current += UnlexerRule(src=self.char_from_list(charset_12))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='\\'))
            current += self.unlexer.EscapeSequence()
        elif choice == 2:
            current += self.unlexer.LineContinuation()
        return current
    DoubleStringCharacter.min_depth = 0

    @depthcontrol
    def SingleStringCharacter(self):
        current = self.create_node(UnlexerRule(name='SingleStringCharacter'))
        choice = self.choice([0 if [0, 1, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            current += UnlexerRule(src=self.char_from_list(charset_13))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='\\'))
            current += self.unlexer.EscapeSequence()
        elif choice == 2:
            current += self.unlexer.LineContinuation()
        return current
    SingleStringCharacter.min_depth = 0

    @depthcontrol
    def EscapeSequence(self):
        current = self.create_node(UnlexerRule(name='EscapeSequence'))
        choice = self.choice([0 if [2, 0, 2, 2, 2][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.unlexer.CharacterEscapeSequence()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='0'))
        elif choice == 2:
            current += self.unlexer.HexEscapeSequence()
        elif choice == 3:
            current += self.unlexer.UnicodeEscapeSequence()
        elif choice == 4:
            current += self.unlexer.ExtendedUnicodeEscapeSequence()
        return current
    EscapeSequence.min_depth = 0

    @depthcontrol
    def CharacterEscapeSequence(self):
        current = self.create_node(UnlexerRule(name='CharacterEscapeSequence'))
        choice = self.choice([0 if [1, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            current += self.unlexer.SingleEscapeCharacter()
        elif choice == 1:
            current += self.unlexer.NonEscapeCharacter()
        return current
    CharacterEscapeSequence.min_depth = 1

    @depthcontrol
    def HexEscapeSequence(self):
        current = self.create_node(UnlexerRule(name='HexEscapeSequence'))
        current += self.create_node(UnlexerRule(src='x'))
        current += self.unlexer.HexDigit()
        current += self.unlexer.HexDigit()
        return current
    HexEscapeSequence.min_depth = 1

    @depthcontrol
    def UnicodeEscapeSequence(self):
        current = self.create_node(UnlexerRule(name='UnicodeEscapeSequence'))
        current += self.create_node(UnlexerRule(src='u'))
        current += self.unlexer.HexDigit()
        current += self.unlexer.HexDigit()
        current += self.unlexer.HexDigit()
        current += self.unlexer.HexDigit()
        return current
    UnicodeEscapeSequence.min_depth = 1

    @depthcontrol
    def ExtendedUnicodeEscapeSequence(self):
        current = self.create_node(UnlexerRule(name='ExtendedUnicodeEscapeSequence'))
        current += self.create_node(UnlexerRule(src='u'))
        current += self.create_node(UnlexerRule(src='{'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.unlexer.HexDigit()

        current += self.create_node(UnlexerRule(src='}'))
        return current
    ExtendedUnicodeEscapeSequence.min_depth = 1

    @depthcontrol
    def SingleEscapeCharacter(self):
        current = self.create_node(UnlexerRule(name='SingleEscapeCharacter'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_14)))
        return current
    SingleEscapeCharacter.min_depth = 0

    @depthcontrol
    def NonEscapeCharacter(self):
        current = self.create_node(UnlexerRule(name='NonEscapeCharacter'))
        current += UnlexerRule(src=self.char_from_list(charset_15))
        return current
    NonEscapeCharacter.min_depth = 0

    @depthcontrol
    def EscapeCharacter(self):
        current = self.create_node(UnlexerRule(name='EscapeCharacter'))
        choice = self.choice([0 if [1, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            current += self.unlexer.SingleEscapeCharacter()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_16)))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_17)))
        return current
    EscapeCharacter.min_depth = 0

    @depthcontrol
    def LineContinuation(self):
        current = self.create_node(UnlexerRule(name='LineContinuation'))
        current += self.create_node(UnlexerRule(src='\\'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_18)))
        return current
    LineContinuation.min_depth = 0

    @depthcontrol
    def HexDigit(self):
        current = self.create_node(UnlexerRule(name='HexDigit'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_19)))
        return current
    HexDigit.min_depth = 0

    @depthcontrol
    def DecimalIntegerLiteral(self):
        current = self.create_node(UnlexerRule(name='DecimalIntegerLiteral'))
        choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            current += self.create_node(UnlexerRule(src='0'))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_20)))
            if self.unlexer.max_depth >= 0:
                for _ in self.zero_or_more():
                    current += self.create_node(UnlexerRule(src=self.char_from_list(charset_21)))

        return current
    DecimalIntegerLiteral.min_depth = 0

    @depthcontrol
    def ExponentPart(self):
        current = self.create_node(UnlexerRule(name='ExponentPart'))
        current += self.create_node(UnlexerRule(src=self.char_from_list(charset_22)))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_one():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_23)))

        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.create_node(UnlexerRule(src=self.char_from_list(charset_24)))

        return current
    ExponentPart.min_depth = 0

    @depthcontrol
    def IdentifierPart(self):
        current = self.create_node(UnlexerRule(name='IdentifierPart'))
        choice = self.choice([0 if [1, 1, 1, 1, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.unlexer.IdentifierStart()
        elif choice == 1:
            current += self.unlexer.UnicodeCombiningMark()
        elif choice == 2:
            current += self.unlexer.UnicodeDigit()
        elif choice == 3:
            current += self.unlexer.UnicodeConnectorPunctuation()
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='\u200C'))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src='\u200D'))
        return current
    IdentifierPart.min_depth = 0

    @depthcontrol
    def IdentifierStart(self):
        current = self.create_node(UnlexerRule(name='IdentifierStart'))
        choice = self.choice([0 if [1, 0, 2][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            current += self.unlexer.UnicodeLetter()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_25)))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='\\'))
            current += self.unlexer.UnicodeEscapeSequence()
        return current
    IdentifierStart.min_depth = 0

    @depthcontrol
    def UnicodeLetter(self):
        current = self.create_node(UnlexerRule(name='UnicodeLetter'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_26)))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_27)))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_28)))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_29)))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_30)))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_31)))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_32)))
        elif choice == 7:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_33)))
        elif choice == 8:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_34)))
        elif choice == 9:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_35)))
        elif choice == 10:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_36)))
        elif choice == 11:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_37)))
        elif choice == 12:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_38)))
        elif choice == 13:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_39)))
        elif choice == 14:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_40)))
        elif choice == 15:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_41)))
        elif choice == 16:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_42)))
        elif choice == 17:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_43)))
        elif choice == 18:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_44)))
        elif choice == 19:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_45)))
        elif choice == 20:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_46)))
        elif choice == 21:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_47)))
        elif choice == 22:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_48)))
        elif choice == 23:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_49)))
        elif choice == 24:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_50)))
        elif choice == 25:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_51)))
        elif choice == 26:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_52)))
        elif choice == 27:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_53)))
        elif choice == 28:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_54)))
        elif choice == 29:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_55)))
        elif choice == 30:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_56)))
        elif choice == 31:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_57)))
        elif choice == 32:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_58)))
        elif choice == 33:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_59)))
        elif choice == 34:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_60)))
        elif choice == 35:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_61)))
        elif choice == 36:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_62)))
        elif choice == 37:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_63)))
        elif choice == 38:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_64)))
        elif choice == 39:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_65)))
        elif choice == 40:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_66)))
        elif choice == 41:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_67)))
        elif choice == 42:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_68)))
        elif choice == 43:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_69)))
        elif choice == 44:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_70)))
        elif choice == 45:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_71)))
        elif choice == 46:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_72)))
        elif choice == 47:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_73)))
        elif choice == 48:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_74)))
        elif choice == 49:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_75)))
        elif choice == 50:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_76)))
        elif choice == 51:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_77)))
        elif choice == 52:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_78)))
        elif choice == 53:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_79)))
        elif choice == 54:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_80)))
        elif choice == 55:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_81)))
        elif choice == 56:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_82)))
        elif choice == 57:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_83)))
        elif choice == 58:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_84)))
        elif choice == 59:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_85)))
        elif choice == 60:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_86)))
        elif choice == 61:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_87)))
        elif choice == 62:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_88)))
        elif choice == 63:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_89)))
        elif choice == 64:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_90)))
        elif choice == 65:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_91)))
        elif choice == 66:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_92)))
        elif choice == 67:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_93)))
        elif choice == 68:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_94)))
        elif choice == 69:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_95)))
        elif choice == 70:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_96)))
        elif choice == 71:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_97)))
        elif choice == 72:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_98)))
        elif choice == 73:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_99)))
        elif choice == 74:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_100)))
        elif choice == 75:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_101)))
        elif choice == 76:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_102)))
        elif choice == 77:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_103)))
        elif choice == 78:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_104)))
        elif choice == 79:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_105)))
        elif choice == 80:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_106)))
        elif choice == 81:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_107)))
        elif choice == 82:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_108)))
        elif choice == 83:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_109)))
        elif choice == 84:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_110)))
        elif choice == 85:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_111)))
        elif choice == 86:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_112)))
        elif choice == 87:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_113)))
        elif choice == 88:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_114)))
        elif choice == 89:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_115)))
        elif choice == 90:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_116)))
        elif choice == 91:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_117)))
        elif choice == 92:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_118)))
        elif choice == 93:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_119)))
        elif choice == 94:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_120)))
        elif choice == 95:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_121)))
        elif choice == 96:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_122)))
        elif choice == 97:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_123)))
        elif choice == 98:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_124)))
        elif choice == 99:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_125)))
        elif choice == 100:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_126)))
        elif choice == 101:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_127)))
        elif choice == 102:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_128)))
        elif choice == 103:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_129)))
        elif choice == 104:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_130)))
        elif choice == 105:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_131)))
        elif choice == 106:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_132)))
        elif choice == 107:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_133)))
        elif choice == 108:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_134)))
        elif choice == 109:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_135)))
        elif choice == 110:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_136)))
        elif choice == 111:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_137)))
        elif choice == 112:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_138)))
        elif choice == 113:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_139)))
        elif choice == 114:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_140)))
        elif choice == 115:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_141)))
        elif choice == 116:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_142)))
        elif choice == 117:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_143)))
        elif choice == 118:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_144)))
        elif choice == 119:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_145)))
        elif choice == 120:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_146)))
        elif choice == 121:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_147)))
        elif choice == 122:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_148)))
        elif choice == 123:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_149)))
        elif choice == 124:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_150)))
        elif choice == 125:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_151)))
        elif choice == 126:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_152)))
        elif choice == 127:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_153)))
        elif choice == 128:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_154)))
        elif choice == 129:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_155)))
        elif choice == 130:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_156)))
        elif choice == 131:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_157)))
        elif choice == 132:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_158)))
        elif choice == 133:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_159)))
        elif choice == 134:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_160)))
        elif choice == 135:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_161)))
        elif choice == 136:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_162)))
        elif choice == 137:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_163)))
        elif choice == 138:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_164)))
        elif choice == 139:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_165)))
        elif choice == 140:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_166)))
        elif choice == 141:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_167)))
        elif choice == 142:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_168)))
        elif choice == 143:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_169)))
        elif choice == 144:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_170)))
        elif choice == 145:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_171)))
        elif choice == 146:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_172)))
        elif choice == 147:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_173)))
        elif choice == 148:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_174)))
        elif choice == 149:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_175)))
        elif choice == 150:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_176)))
        elif choice == 151:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_177)))
        elif choice == 152:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_178)))
        elif choice == 153:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_179)))
        elif choice == 154:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_180)))
        elif choice == 155:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_181)))
        elif choice == 156:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_182)))
        elif choice == 157:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_183)))
        elif choice == 158:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_184)))
        elif choice == 159:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_185)))
        elif choice == 160:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_186)))
        elif choice == 161:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_187)))
        elif choice == 162:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_188)))
        elif choice == 163:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_189)))
        elif choice == 164:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_190)))
        elif choice == 165:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_191)))
        elif choice == 166:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_192)))
        elif choice == 167:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_193)))
        elif choice == 168:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_194)))
        elif choice == 169:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_195)))
        elif choice == 170:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_196)))
        elif choice == 171:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_197)))
        elif choice == 172:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_198)))
        elif choice == 173:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_199)))
        elif choice == 174:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_200)))
        elif choice == 175:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_201)))
        elif choice == 176:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_202)))
        elif choice == 177:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_203)))
        elif choice == 178:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_204)))
        elif choice == 179:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_205)))
        elif choice == 180:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_206)))
        elif choice == 181:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_207)))
        elif choice == 182:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_208)))
        elif choice == 183:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_209)))
        elif choice == 184:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_210)))
        elif choice == 185:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_211)))
        elif choice == 186:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_212)))
        elif choice == 187:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_213)))
        elif choice == 188:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_214)))
        elif choice == 189:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_215)))
        elif choice == 190:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_216)))
        elif choice == 191:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_217)))
        elif choice == 192:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_218)))
        elif choice == 193:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_219)))
        elif choice == 194:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_220)))
        elif choice == 195:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_221)))
        elif choice == 196:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_222)))
        elif choice == 197:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_223)))
        elif choice == 198:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_224)))
        elif choice == 199:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_225)))
        elif choice == 200:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_226)))
        elif choice == 201:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_227)))
        elif choice == 202:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_228)))
        elif choice == 203:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_229)))
        elif choice == 204:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_230)))
        elif choice == 205:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_231)))
        elif choice == 206:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_232)))
        elif choice == 207:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_233)))
        elif choice == 208:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_234)))
        elif choice == 209:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_235)))
        elif choice == 210:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_236)))
        elif choice == 211:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_237)))
        elif choice == 212:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_238)))
        elif choice == 213:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_239)))
        elif choice == 214:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_240)))
        elif choice == 215:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_241)))
        elif choice == 216:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_242)))
        elif choice == 217:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_243)))
        elif choice == 218:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_244)))
        elif choice == 219:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_245)))
        elif choice == 220:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_246)))
        elif choice == 221:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_247)))
        elif choice == 222:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_248)))
        elif choice == 223:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_249)))
        elif choice == 224:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_250)))
        elif choice == 225:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_251)))
        elif choice == 226:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_252)))
        elif choice == 227:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_253)))
        elif choice == 228:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_254)))
        elif choice == 229:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_255)))
        elif choice == 230:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_256)))
        elif choice == 231:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_257)))
        elif choice == 232:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_258)))
        elif choice == 233:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_259)))
        elif choice == 234:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_260)))
        elif choice == 235:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_261)))
        elif choice == 236:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_262)))
        elif choice == 237:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_263)))
        elif choice == 238:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_264)))
        elif choice == 239:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_265)))
        elif choice == 240:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_266)))
        elif choice == 241:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_267)))
        elif choice == 242:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_268)))
        elif choice == 243:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_269)))
        elif choice == 244:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_270)))
        elif choice == 245:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_271)))
        elif choice == 246:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_272)))
        elif choice == 247:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_273)))
        elif choice == 248:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_274)))
        elif choice == 249:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_275)))
        elif choice == 250:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_276)))
        elif choice == 251:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_277)))
        elif choice == 252:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_278)))
        elif choice == 253:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_279)))
        elif choice == 254:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_280)))
        elif choice == 255:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_281)))
        elif choice == 256:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_282)))
        elif choice == 257:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_283)))
        elif choice == 258:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_284)))
        elif choice == 259:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_285)))
        elif choice == 260:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_286)))
        return current
    UnicodeLetter.min_depth = 0

    @depthcontrol
    def UnicodeCombiningMark(self):
        current = self.create_node(UnlexerRule(name='UnicodeCombiningMark'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_287)))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_288)))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_289)))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_290)))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_291)))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_292)))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_293)))
        elif choice == 7:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_294)))
        elif choice == 8:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_295)))
        elif choice == 9:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_296)))
        elif choice == 10:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_297)))
        elif choice == 11:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_298)))
        elif choice == 12:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_299)))
        elif choice == 13:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_300)))
        elif choice == 14:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_301)))
        elif choice == 15:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_302)))
        elif choice == 16:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_303)))
        elif choice == 17:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_304)))
        elif choice == 18:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_305)))
        elif choice == 19:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_306)))
        elif choice == 20:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_307)))
        elif choice == 21:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_308)))
        elif choice == 22:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_309)))
        elif choice == 23:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_310)))
        elif choice == 24:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_311)))
        elif choice == 25:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_312)))
        elif choice == 26:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_313)))
        elif choice == 27:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_314)))
        elif choice == 28:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_315)))
        elif choice == 29:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_316)))
        elif choice == 30:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_317)))
        elif choice == 31:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_318)))
        elif choice == 32:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_319)))
        elif choice == 33:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_320)))
        elif choice == 34:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_321)))
        elif choice == 35:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_322)))
        elif choice == 36:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_323)))
        elif choice == 37:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_324)))
        elif choice == 38:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_325)))
        elif choice == 39:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_326)))
        elif choice == 40:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_327)))
        elif choice == 41:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_328)))
        elif choice == 42:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_329)))
        elif choice == 43:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_330)))
        elif choice == 44:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_331)))
        elif choice == 45:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_332)))
        elif choice == 46:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_333)))
        elif choice == 47:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_334)))
        elif choice == 48:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_335)))
        elif choice == 49:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_336)))
        elif choice == 50:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_337)))
        elif choice == 51:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_338)))
        elif choice == 52:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_339)))
        elif choice == 53:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_340)))
        elif choice == 54:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_341)))
        elif choice == 55:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_342)))
        elif choice == 56:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_343)))
        elif choice == 57:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_344)))
        elif choice == 58:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_345)))
        elif choice == 59:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_346)))
        elif choice == 60:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_347)))
        elif choice == 61:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_348)))
        elif choice == 62:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_349)))
        elif choice == 63:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_350)))
        elif choice == 64:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_351)))
        elif choice == 65:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_352)))
        elif choice == 66:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_353)))
        elif choice == 67:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_354)))
        elif choice == 68:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_355)))
        elif choice == 69:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_356)))
        elif choice == 70:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_357)))
        elif choice == 71:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_358)))
        elif choice == 72:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_359)))
        elif choice == 73:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_360)))
        elif choice == 74:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_361)))
        elif choice == 75:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_362)))
        elif choice == 76:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_363)))
        elif choice == 77:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_364)))
        elif choice == 78:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_365)))
        elif choice == 79:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_366)))
        elif choice == 80:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_367)))
        elif choice == 81:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_368)))
        elif choice == 82:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_369)))
        elif choice == 83:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_370)))
        elif choice == 84:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_371)))
        elif choice == 85:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_372)))
        elif choice == 86:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_373)))
        elif choice == 87:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_374)))
        elif choice == 88:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_375)))
        elif choice == 89:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_376)))
        elif choice == 90:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_377)))
        elif choice == 91:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_378)))
        elif choice == 92:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_379)))
        elif choice == 93:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_380)))
        elif choice == 94:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_381)))
        elif choice == 95:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_382)))
        elif choice == 96:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_383)))
        elif choice == 97:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_384)))
        elif choice == 98:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_385)))
        elif choice == 99:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_386)))
        return current
    UnicodeCombiningMark.min_depth = 0

    @depthcontrol
    def UnicodeDigit(self):
        current = self.create_node(UnlexerRule(name='UnicodeDigit'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_387)))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_388)))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_389)))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_390)))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_391)))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_392)))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_393)))
        elif choice == 7:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_394)))
        elif choice == 8:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_395)))
        elif choice == 9:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_396)))
        elif choice == 10:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_397)))
        elif choice == 11:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_398)))
        elif choice == 12:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_399)))
        elif choice == 13:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_400)))
        elif choice == 14:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_401)))
        elif choice == 15:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_402)))
        elif choice == 16:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_403)))
        elif choice == 17:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_404)))
        elif choice == 18:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_405)))
        elif choice == 19:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_406)))
        return current
    UnicodeDigit.min_depth = 0

    @depthcontrol
    def UnicodeConnectorPunctuation(self):
        current = self.create_node(UnlexerRule(name='UnicodeConnectorPunctuation'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_407)))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_408)))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_409)))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_410)))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_411)))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_412)))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src=self.char_from_list(charset_413)))
        return current
    UnicodeConnectorPunctuation.min_depth = 0

    @depthcontrol
    def RegularExpressionChar(self):
        current = self.create_node(UnlexerRule(name='RegularExpressionChar'))
        choice = self.choice([0 if [0, 1, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            current += UnlexerRule(src=self.char_from_list(charset_414))
        elif choice == 1:
            current += self.unlexer.RegularExpressionBackslashSequence()
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='['))
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_more():
                    current += self.unlexer.RegularExpressionClassChar()

            current += self.create_node(UnlexerRule(src=']'))
        return current
    RegularExpressionChar.min_depth = 0

    @depthcontrol
    def RegularExpressionClassChar(self):
        current = self.create_node(UnlexerRule(name='RegularExpressionClassChar'))
        choice = self.choice([0 if [0, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            current += UnlexerRule(src=self.char_from_list(charset_415))
        elif choice == 1:
            current += self.unlexer.RegularExpressionBackslashSequence()
        return current
    RegularExpressionClassChar.min_depth = 0

    @depthcontrol
    def RegularExpressionBackslashSequence(self):
        current = self.create_node(UnlexerRule(name='RegularExpressionBackslashSequence'))
        current += self.create_node(UnlexerRule(src='\\'))
        current += UnlexerRule(src=self.char_from_list(charset_416))
        return current
    RegularExpressionBackslashSequence.min_depth = 0

    def set_options(self):
        self.options = dict(tokenVocab="JavaScriptLexer", superClass="JavaScriptBaseParser")

