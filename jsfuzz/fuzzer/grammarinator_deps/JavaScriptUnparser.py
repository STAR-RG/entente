# Generated by Grammarinator 17.7

from itertools import chain
from grammarinator.runtime import *

import JavaScriptUnlexer


class JavaScriptUnparser(Grammarinator):

    def __init__(self, unlexer):
        super(JavaScriptUnparser, self).__init__()
        self.unlexer = unlexer
        self.set_options()

    def set_options(self):
        self.options = dict(tokenVocab="JavaScriptLexer", superClass="JavaScriptBaseParser")

    @depthcontrol
    def program(self):
        current = self.create_node(UnparserRule(name='program'))
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.sourceElements()

        current += self.unlexer.EOF()
        return current
    program.min_depth = 1

    @depthcontrol
    def sourceElement(self):
        current = self.create_node(UnparserRule(name='sourceElement'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.unlexer.Export()

        current += self.statement()
        return current
    sourceElement.min_depth = 2

    @depthcontrol
    def statement(self):
        current = self.create_node(UnparserRule(name='statement'))
        choice = self.choice([0 if [1, 4, 2, 4, 4, 3, 2, 2, 2, 4, 3, 4, 4, 3, 2, 3, 3][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.block()
        elif choice == 1:
            current += self.variableStatement()
        elif choice == 2:
            current += self.emptyStatement()
        elif choice == 3:
            current += self.expressionStatement()
        elif choice == 4:
            current += self.ifStatement()
        elif choice == 5:
            current += self.iterationStatement()
        elif choice == 6:
            current += self.continueStatement()
        elif choice == 7:
            current += self.breakStatement()
        elif choice == 8:
            current += self.returnStatement()
        elif choice == 9:
            current += self.withStatement()
        elif choice == 10:
            current += self.labelledStatement()
        elif choice == 11:
            current += self.switchStatement()
        elif choice == 12:
            current += self.throwStatement()
        elif choice == 13:
            current += self.tryStatement()
        elif choice == 14:
            current += self.debuggerStatement()
        elif choice == 15:
            current += self.functionDeclaration()
        elif choice == 16:
            current += self.classDeclaration()
        return current
    statement.min_depth = 1

    @depthcontrol
    def block(self):
        current = self.create_node(UnparserRule(name='block'))
        current += self.create_node(UnlexerRule(src='{'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.statementList()

        current += self.create_node(UnlexerRule(src='}'))
        return current
    block.min_depth = 0

    @depthcontrol
    def statementList(self):
        current = self.create_node(UnparserRule(name='statementList'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.statement()

        return current
    statementList.min_depth = 2

    @depthcontrol
    def variableStatement(self):
        current = self.create_node(UnparserRule(name='variableStatement'))
        current += self.varModifier()
        current += self.variableDeclarationList()
        current += self.eos()
        return current
    variableStatement.min_depth = 3

    @depthcontrol
    def variableDeclarationList(self):
        current = self.create_node(UnparserRule(name='variableDeclarationList'))
        current += self.variableDeclaration()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                current += self.create_node(UnlexerRule(src=','))
                current += self.variableDeclaration()

        return current
    variableDeclarationList.min_depth = 2

    @depthcontrol
    def variableDeclaration(self):
        current = self.create_node(UnparserRule(name='variableDeclaration'))
        choice = self.choice([0 if [2, 1, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            current += self.unlexer.Identifier()
        elif choice == 1:
            current += self.arrayLiteral()
        elif choice == 2:
            current += self.objectLiteral()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.create_node(UnlexerRule(src='='))
                current += self.singleExpression()

        return current
    variableDeclaration.min_depth = 1

    @depthcontrol
    def emptyStatement(self):
        current = self.create_node(UnparserRule(name='emptyStatement'))
        current += self.unlexer.SemiColon()
        return current
    emptyStatement.min_depth = 1

    @depthcontrol
    def expressionStatement(self):
        current = self.create_node(UnparserRule(name='expressionStatement'))
        current += self.expressionSequence()
        current += self.eos()
        return current
    expressionStatement.min_depth = 3

    @depthcontrol
    def ifStatement(self):
        current = self.create_node(UnparserRule(name='ifStatement'))
        current += self.unlexer.If()
        current += self.create_node(UnlexerRule(src='('))
        current += self.expressionSequence()
        current += self.create_node(UnlexerRule(src=')'))
        current += self.statement()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.Else()
                current += self.statement()

        return current
    ifStatement.min_depth = 3

    @depthcontrol
    def iterationStatement(self):
        current = self.create_node(UnparserRule(name='iterationStatement'))
        choice = self.choice([0 if [3, 3, 2, 3, 3, 3][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.unlexer.Do()
            current += self.statement()
            current += self.unlexer.While()
            current += self.create_node(UnlexerRule(src='('))
            current += self.expressionSequence()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.eos()
        elif choice == 1:
            current += self.unlexer.While()
            current += self.create_node(UnlexerRule(src='('))
            current += self.expressionSequence()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
        elif choice == 2:
            current += self.unlexer.For()
            current += self.create_node(UnlexerRule(src='('))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.expressionSequence()

            current += self.create_node(UnlexerRule(src=';'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.expressionSequence()

            current += self.create_node(UnlexerRule(src=';'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.expressionSequence()

            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
        elif choice == 3:
            current += self.unlexer.For()
            current += self.create_node(UnlexerRule(src='('))
            current += self.varModifier()
            current += self.variableDeclarationList()
            current += self.create_node(UnlexerRule(src=';'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.expressionSequence()

            current += self.create_node(UnlexerRule(src=';'))
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.expressionSequence()

            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
        elif choice == 4:
            current += self.unlexer.For()
            current += self.create_node(UnlexerRule(src='('))
            current += self.singleExpression()
            choice = self.choice([0 if [1, 2][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
            if choice == 0:
                current += self.unlexer.In()
            elif choice == 1:
                current += self.unlexer.Identifier()
            current += self.expressionSequence()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
        elif choice == 5:
            current += self.unlexer.For()
            current += self.create_node(UnlexerRule(src='('))
            current += self.varModifier()
            current += self.variableDeclaration()
            choice = self.choice([0 if [1, 2][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
            if choice == 0:
                current += self.unlexer.In()
            elif choice == 1:
                current += self.unlexer.Identifier()
            current += self.expressionSequence()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.statement()
        return current
    iterationStatement.min_depth = 2

    @depthcontrol
    def varModifier(self):
        current = self.create_node(UnparserRule(name='varModifier'))
        choice = self.choice([0 if [1, 1, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            current += self.unlexer.Var()
        elif choice == 1:
            current += self.unlexer.Let()
        elif choice == 2:
            current += self.unlexer.Const()
        return current
    varModifier.min_depth = 1

    @depthcontrol
    def continueStatement(self):
        current = self.create_node(UnparserRule(name='continueStatement'))
        current += self.unlexer.Continue()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.Identifier()

        current += self.eos()
        return current
    continueStatement.min_depth = 1

    @depthcontrol
    def breakStatement(self):
        current = self.create_node(UnparserRule(name='breakStatement'))
        current += self.unlexer.Break()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.Identifier()

        current += self.eos()
        return current
    breakStatement.min_depth = 1

    @depthcontrol
    def returnStatement(self):
        current = self.create_node(UnparserRule(name='returnStatement'))
        current += self.unlexer.Return()
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.expressionSequence()

        current += self.eos()
        return current
    returnStatement.min_depth = 1

    @depthcontrol
    def withStatement(self):
        current = self.create_node(UnparserRule(name='withStatement'))
        current += self.unlexer.With()
        current += self.create_node(UnlexerRule(src='('))
        current += self.expressionSequence()
        current += self.create_node(UnlexerRule(src=')'))
        current += self.statement()
        return current
    withStatement.min_depth = 3

    @depthcontrol
    def switchStatement(self):
        current = self.create_node(UnparserRule(name='switchStatement'))
        current += self.unlexer.Switch()
        current += self.create_node(UnlexerRule(src='('))
        current += self.expressionSequence()
        current += self.create_node(UnlexerRule(src=')'))
        current += self.caseBlock()
        return current
    switchStatement.min_depth = 3

    @depthcontrol
    def caseBlock(self):
        current = self.create_node(UnparserRule(name='caseBlock'))
        current += self.create_node(UnlexerRule(src='{'))
        if self.unlexer.max_depth >= 5:
            for _ in self.zero_or_one():
                current += self.caseClauses()

        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.defaultClause()
                if self.unlexer.max_depth >= 5:
                    for _ in self.zero_or_one():
                        current += self.caseClauses()


        current += self.create_node(UnlexerRule(src='}'))
        return current
    caseBlock.min_depth = 0

    @depthcontrol
    def caseClauses(self):
        current = self.create_node(UnparserRule(name='caseClauses'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.caseClause()

        return current
    caseClauses.min_depth = 4

    @depthcontrol
    def caseClause(self):
        current = self.create_node(UnparserRule(name='caseClause'))
        current += self.unlexer.Case()
        current += self.expressionSequence()
        current += self.create_node(UnlexerRule(src=':'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.statementList()

        return current
    caseClause.min_depth = 3

    @depthcontrol
    def defaultClause(self):
        current = self.create_node(UnparserRule(name='defaultClause'))
        current += self.unlexer.Default()
        current += self.create_node(UnlexerRule(src=':'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.statementList()

        return current
    defaultClause.min_depth = 1

    @depthcontrol
    def labelledStatement(self):
        current = self.create_node(UnparserRule(name='labelledStatement'))
        current += self.unlexer.Identifier()
        current += self.create_node(UnlexerRule(src=':'))
        current += self.statement()
        return current
    labelledStatement.min_depth = 2

    @depthcontrol
    def throwStatement(self):
        current = self.create_node(UnparserRule(name='throwStatement'))
        current += self.unlexer.Throw()
        current += self.expressionSequence()
        current += self.eos()
        return current
    throwStatement.min_depth = 3

    @depthcontrol
    def tryStatement(self):
        current = self.create_node(UnparserRule(name='tryStatement'))
        current += self.unlexer.Try()
        current += self.block()
        choice = self.choice([0 if [3, 2][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            current += self.catchProduction()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.finallyProduction()

        elif choice == 1:
            current += self.finallyProduction()
        return current
    tryStatement.min_depth = 2

    @depthcontrol
    def catchProduction(self):
        current = self.create_node(UnparserRule(name='catchProduction'))
        current += self.unlexer.Catch()
        current += self.create_node(UnlexerRule(src='('))
        current += self.unlexer.Identifier()
        current += self.create_node(UnlexerRule(src=')'))
        current += self.block()
        return current
    catchProduction.min_depth = 2

    @depthcontrol
    def finallyProduction(self):
        current = self.create_node(UnparserRule(name='finallyProduction'))
        current += self.unlexer.Finally()
        current += self.block()
        return current
    finallyProduction.min_depth = 1

    @depthcontrol
    def debuggerStatement(self):
        current = self.create_node(UnparserRule(name='debuggerStatement'))
        current += self.unlexer.Debugger()
        current += self.eos()
        return current
    debuggerStatement.min_depth = 1

    @depthcontrol
    def functionDeclaration(self):
        current = self.create_node(UnparserRule(name='functionDeclaration'))
        current += self.unlexer.Function()
        current += self.unlexer.Identifier()
        current += self.create_node(UnlexerRule(src='('))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.formalParameterList()

        current += self.create_node(UnlexerRule(src=')'))
        current += self.create_node(UnlexerRule(src='{'))
        current += self.functionBody()
        current += self.create_node(UnlexerRule(src='}'))
        return current
    functionDeclaration.min_depth = 2

    @depthcontrol
    def classDeclaration(self):
        current = self.create_node(UnparserRule(name='classDeclaration'))
        current += self.unlexer.Class()
        current += self.unlexer.Identifier()
        current += self.classTail()
        return current
    classDeclaration.min_depth = 2

    @depthcontrol
    def classTail(self):
        current = self.create_node(UnparserRule(name='classTail'))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.unlexer.Extends()
                current += self.singleExpression()

        current += self.create_node(UnlexerRule(src='{'))
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_more():
                current += self.classElement()

        current += self.create_node(UnlexerRule(src='}'))
        return current
    classTail.min_depth = 0

    @depthcontrol
    def classElement(self):
        current = self.create_node(UnparserRule(name='classElement'))
        if self.unlexer.max_depth >= 1:
            for _ in self.zero_or_one():
                current += self.unlexer.Static()

        current += self.methodDefinition()
        return current
    classElement.min_depth = 3

    @depthcontrol
    def methodDefinition(self):
        current = self.create_node(UnparserRule(name='methodDefinition'))
        choice = self.choice([0 if [2, 3, 3, 3][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1])])
        if choice == 0:
            current += self.propertyName()
            current += self.create_node(UnlexerRule(src='('))
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.formalParameterList()

            current += self.create_node(UnlexerRule(src=')'))
            current += self.create_node(UnlexerRule(src='{'))
            current += self.functionBody()
            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 1:
            current += self.getter()
            current += self.create_node(UnlexerRule(src='('))
            current += self.create_node(UnlexerRule(src=')'))
            current += self.create_node(UnlexerRule(src='{'))
            current += self.functionBody()
            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 2:
            current += self.setter()
            current += self.create_node(UnlexerRule(src='('))
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.formalParameterList()

            current += self.create_node(UnlexerRule(src=')'))
            current += self.create_node(UnlexerRule(src='{'))
            current += self.functionBody()
            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 3:
            current += self.generatorMethod()
        return current
    methodDefinition.min_depth = 2

    @depthcontrol
    def generatorMethod(self):
        current = self.create_node(UnparserRule(name='generatorMethod'))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_one():
                current += self.create_node(UnlexerRule(src='*'))

        current += self.unlexer.Identifier()
        current += self.create_node(UnlexerRule(src='('))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.formalParameterList()

        current += self.create_node(UnlexerRule(src=')'))
        current += self.create_node(UnlexerRule(src='{'))
        current += self.functionBody()
        current += self.create_node(UnlexerRule(src='}'))
        return current
    generatorMethod.min_depth = 2

    @depthcontrol
    def formalParameterList(self):
        current = self.create_node(UnparserRule(name='formalParameterList'))
        choice = self.choice([0 if [3, 3, 1, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1])])
        if choice == 0:
            current += self.formalParameterArg()
            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_more():
                    current += self.create_node(UnlexerRule(src=','))
                    current += self.formalParameterArg()

            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    current += self.create_node(UnlexerRule(src=','))
                    current += self.lastFormalParameterArg()

        elif choice == 1:
            current += self.lastFormalParameterArg()
        elif choice == 2:
            current += self.arrayLiteral()
        elif choice == 3:
            current += self.objectLiteral()
        return current
    formalParameterList.min_depth = 1

    @depthcontrol
    def formalParameterArg(self):
        current = self.create_node(UnparserRule(name='formalParameterArg'))
        current += self.unlexer.Identifier()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                current += self.create_node(UnlexerRule(src='='))
                current += self.singleExpression()

        return current
    formalParameterArg.min_depth = 2

    @depthcontrol
    def lastFormalParameterArg(self):
        current = self.create_node(UnparserRule(name='lastFormalParameterArg'))
        current += self.unlexer.Ellipsis()
        current += self.unlexer.Identifier()
        return current
    lastFormalParameterArg.min_depth = 2

    @depthcontrol
    def functionBody(self):
        current = self.create_node(UnparserRule(name='functionBody'))
        if self.unlexer.max_depth >= 4:
            for _ in self.zero_or_one():
                current += self.sourceElements()

        return current
    functionBody.min_depth = 0

    @depthcontrol
    def sourceElements(self):
        current = self.create_node(UnparserRule(name='sourceElements'))
        if self.unlexer.max_depth >= 0:
            for _ in self.one_or_more():
                current += self.sourceElement()

        return current
    sourceElements.min_depth = 3

    @depthcontrol
    def arrayLiteral(self):
        current = self.create_node(UnparserRule(name='arrayLiteral'))
        current += self.create_node(UnlexerRule(src='['))
        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += self.create_node(UnlexerRule(src=','))

        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.elementList()

        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_more():
                current += self.create_node(UnlexerRule(src=','))

        current += self.create_node(UnlexerRule(src=']'))
        return current
    arrayLiteral.min_depth = 0

    @depthcontrol
    def elementList(self):
        current = self.create_node(UnparserRule(name='elementList'))
        choice = self.choice([0 if [2, 3][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            current += self.singleExpression()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_more():
                    if self.unlexer.max_depth >= 0:
                        for _ in self.one_or_more():
                            current += self.create_node(UnlexerRule(src=','))

                    current += self.singleExpression()

            if self.unlexer.max_depth >= 3:
                for _ in self.zero_or_one():
                    if self.unlexer.max_depth >= 0:
                        for _ in self.one_or_more():
                            current += self.create_node(UnlexerRule(src=','))

                    current += self.lastElement()

        elif choice == 1:
            current += self.lastElement()
        return current
    elementList.min_depth = 2

    @depthcontrol
    def lastElement(self):
        current = self.create_node(UnparserRule(name='lastElement'))
        current += self.unlexer.Ellipsis()
        current += self.unlexer.Identifier()
        return current
    lastElement.min_depth = 2

    @depthcontrol
    def objectLiteral(self):
        current = self.create_node(UnparserRule(name='objectLiteral'))
        current += self.create_node(UnlexerRule(src='{'))
        if self.unlexer.max_depth >= 3:
            for _ in self.zero_or_one():
                current += self.propertyAssignment()
                if self.unlexer.max_depth >= 3:
                    for _ in self.zero_or_more():
                        current += self.create_node(UnlexerRule(src=','))
                        current += self.propertyAssignment()


        if self.unlexer.max_depth >= 0:
            for _ in self.zero_or_one():
                current += self.create_node(UnlexerRule(src=','))

        current += self.create_node(UnlexerRule(src='}'))
        return current
    objectLiteral.min_depth = 0

    @depthcontrol
    def propertyAssignment(self):
        current = self.create_node(UnparserRule(name='propertyAssignment'))
        choice = self.choice([0 if [2, 2, 3, 3, 3, 2][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.propertyName()
            choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
            if choice == 0:
                current += self.create_node(UnlexerRule(src=':'))
            elif choice == 1:
                current += self.create_node(UnlexerRule(src='='))
            current += self.singleExpression()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='['))
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src=']'))
            current += self.create_node(UnlexerRule(src=':'))
            current += self.singleExpression()
        elif choice == 2:
            current += self.getter()
            current += self.create_node(UnlexerRule(src='('))
            current += self.create_node(UnlexerRule(src=')'))
            current += self.create_node(UnlexerRule(src='{'))
            current += self.functionBody()
            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 3:
            current += self.setter()
            current += self.create_node(UnlexerRule(src='('))
            current += self.unlexer.Identifier()
            current += self.create_node(UnlexerRule(src=')'))
            current += self.create_node(UnlexerRule(src='{'))
            current += self.functionBody()
            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 4:
            current += self.generatorMethod()
        elif choice == 5:
            current += self.unlexer.Identifier()
        return current
    propertyAssignment.min_depth = 2

    @depthcontrol
    def propertyName(self):
        current = self.create_node(UnparserRule(name='propertyName'))
        choice = self.choice([0 if [3, 1, 2][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            current += self.identifierName()
        elif choice == 1:
            current += self.unlexer.StringLiteral()
        elif choice == 2:
            current += self.numericLiteral()
        return current
    propertyName.min_depth = 1

    @depthcontrol
    def arguments(self):
        current = self.create_node(UnparserRule(name='arguments'))
        current += self.create_node(UnlexerRule(src='('))
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_one():
                choice = self.choice([0 if [2, 3][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
                if choice == 0:
                    current += self.singleExpression()
                    if self.unlexer.max_depth >= 2:
                        for _ in self.zero_or_more():
                            current += self.create_node(UnlexerRule(src=','))
                            current += self.singleExpression()

                    if self.unlexer.max_depth >= 3:
                        for _ in self.zero_or_one():
                            current += self.create_node(UnlexerRule(src=','))
                            current += self.lastArgument()

                elif choice == 1:
                    current += self.lastArgument()

        current += self.create_node(UnlexerRule(src=')'))
        return current
    arguments.min_depth = 0

    @depthcontrol
    def lastArgument(self):
        current = self.create_node(UnparserRule(name='lastArgument'))
        current += self.unlexer.Ellipsis()
        current += self.unlexer.Identifier()
        return current
    lastArgument.min_depth = 2

    @depthcontrol
    def expressionSequence(self):
        current = self.create_node(UnparserRule(name='expressionSequence'))
        current += self.singleExpression()
        if self.unlexer.max_depth >= 2:
            for _ in self.zero_or_more():
                current += self.create_node(UnlexerRule(src=','))
                current += self.singleExpression()

        return current
    expressionSequence.min_depth = 2

    @depthcontrol
    def singleExpression(self):
        current = self.create_node(UnparserRule(name='singleExpression'))
        choice = self.choice([0 if [1, 1, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 1, 3, 2][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.unlexer.Function()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.unlexer.Identifier()

            current += self.create_node(UnlexerRule(src='('))
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.formalParameterList()

            current += self.create_node(UnlexerRule(src=')'))
            current += self.create_node(UnlexerRule(src='{'))
            current += self.functionBody()
            current += self.create_node(UnlexerRule(src='}'))
        elif choice == 1:
            current += self.unlexer.Class()
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.unlexer.Identifier()

            current += self.classTail()
        elif choice == 2:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='['))
            current += self.expressionSequence()
            current += self.create_node(UnlexerRule(src=']'))
        elif choice == 3:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='.'))
            current += self.identifierName()
        elif choice == 4:
            current += self.singleExpression()
            current += self.arguments()
        elif choice == 5:
            current += self.unlexer.New()
            current += self.singleExpression()
            if self.unlexer.max_depth >= 1:
                for _ in self.zero_or_one():
                    current += self.arguments()

        elif choice == 6:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='++'))
        elif choice == 7:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='--'))
        elif choice == 8:
            current += self.unlexer.Delete()
            current += self.singleExpression()
        elif choice == 9:
            current += self.unlexer.Void()
            current += self.singleExpression()
        elif choice == 10:
            current += self.unlexer.Typeof()
            current += self.singleExpression()
        elif choice == 11:
            current += self.create_node(UnlexerRule(src='++'))
            current += self.singleExpression()
        elif choice == 12:
            current += self.create_node(UnlexerRule(src='--'))
            current += self.singleExpression()
        elif choice == 13:
            current += self.create_node(UnlexerRule(src='+'))
            current += self.singleExpression()
        elif choice == 14:
            current += self.create_node(UnlexerRule(src='-'))
            current += self.singleExpression()
        elif choice == 15:
            current += self.create_node(UnlexerRule(src='~'))
            current += self.singleExpression()
        elif choice == 16:
            current += self.create_node(UnlexerRule(src='!'))
            current += self.singleExpression()
        elif choice == 17:
            current += self.singleExpression()
            choice = self.choice([0 if [0, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
            if choice == 0:
                current += self.create_node(UnlexerRule(src='*'))
            elif choice == 1:
                current += self.create_node(UnlexerRule(src='/'))
            elif choice == 2:
                current += self.create_node(UnlexerRule(src='%'))
            current += self.singleExpression()
        elif choice == 18:
            current += self.singleExpression()
            choice = self.choice([0 if [0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
            if choice == 0:
                current += self.create_node(UnlexerRule(src='+'))
            elif choice == 1:
                current += self.create_node(UnlexerRule(src='-'))
            current += self.singleExpression()
        elif choice == 19:
            current += self.singleExpression()
            choice = self.choice([0 if [0, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
            if choice == 0:
                current += self.create_node(UnlexerRule(src='<<'))
            elif choice == 1:
                current += self.create_node(UnlexerRule(src='>>'))
            elif choice == 2:
                current += self.create_node(UnlexerRule(src='>>>'))
            current += self.singleExpression()
        elif choice == 20:
            current += self.singleExpression()
            choice = self.choice([0 if [0, 0, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1])])
            if choice == 0:
                current += self.create_node(UnlexerRule(src='<'))
            elif choice == 1:
                current += self.create_node(UnlexerRule(src='>'))
            elif choice == 2:
                current += self.create_node(UnlexerRule(src='<='))
            elif choice == 3:
                current += self.create_node(UnlexerRule(src='>='))
            current += self.singleExpression()
        elif choice == 21:
            current += self.singleExpression()
            current += self.unlexer.Instanceof()
            current += self.singleExpression()
        elif choice == 22:
            current += self.singleExpression()
            current += self.unlexer.In()
            current += self.singleExpression()
        elif choice == 23:
            current += self.singleExpression()
            choice = self.choice([0 if [0, 0, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1])])
            if choice == 0:
                current += self.create_node(UnlexerRule(src='=='))
            elif choice == 1:
                current += self.create_node(UnlexerRule(src='!='))
            elif choice == 2:
                current += self.create_node(UnlexerRule(src='==='))
            elif choice == 3:
                current += self.create_node(UnlexerRule(src='!=='))
            current += self.singleExpression()
        elif choice == 24:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='&'))
            current += self.singleExpression()
        elif choice == 25:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='^'))
            current += self.singleExpression()
        elif choice == 26:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='|'))
            current += self.singleExpression()
        elif choice == 27:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='&&'))
            current += self.singleExpression()
        elif choice == 28:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='||'))
            current += self.singleExpression()
        elif choice == 29:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='?'))
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src=':'))
            current += self.singleExpression()
        elif choice == 30:
            current += self.singleExpression()
            current += self.create_node(UnlexerRule(src='='))
            current += self.singleExpression()
        elif choice == 31:
            current += self.singleExpression()
            current += self.assignmentOperator()
            current += self.singleExpression()
        elif choice == 32:
            current += self.singleExpression()
            current += self.unlexer.TemplateStringLiteral()
        elif choice == 33:
            current += self.unlexer.This()
        elif choice == 34:
            current += self.unlexer.Identifier()
        elif choice == 35:
            current += self.unlexer.Super()
        elif choice == 36:
            current += self.literal()
        elif choice == 37:
            current += self.arrayLiteral()
        elif choice == 38:
            current += self.objectLiteral()
        elif choice == 39:
            current += self.create_node(UnlexerRule(src='('))
            current += self.expressionSequence()
            current += self.create_node(UnlexerRule(src=')'))
        elif choice == 40:
            current += self.arrowFunctionParameters()
            current += self.create_node(UnlexerRule(src='=>'))
            current += self.arrowFunctionBody()
        return current
    singleExpression.min_depth = 1

    @depthcontrol
    def arrowFunctionParameters(self):
        current = self.create_node(UnparserRule(name='arrowFunctionParameters'))
        choice = self.choice([0 if [2, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            current += self.unlexer.Identifier()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='('))
            if self.unlexer.max_depth >= 2:
                for _ in self.zero_or_one():
                    current += self.formalParameterList()

            current += self.create_node(UnlexerRule(src=')'))
        return current
    arrowFunctionParameters.min_depth = 0

    @depthcontrol
    def arrowFunctionBody(self):
        current = self.create_node(UnparserRule(name='arrowFunctionBody'))
        choice = self.choice([0 if [2, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            current += self.singleExpression()
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='{'))
            current += self.functionBody()
            current += self.create_node(UnlexerRule(src='}'))
        return current
    arrowFunctionBody.min_depth = 1

    @depthcontrol
    def assignmentOperator(self):
        current = self.create_node(UnparserRule(name='assignmentOperator'))
        choice = self.choice([0 if [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.create_node(UnlexerRule(src='*='))
        elif choice == 1:
            current += self.create_node(UnlexerRule(src='/='))
        elif choice == 2:
            current += self.create_node(UnlexerRule(src='%='))
        elif choice == 3:
            current += self.create_node(UnlexerRule(src='+='))
        elif choice == 4:
            current += self.create_node(UnlexerRule(src='-='))
        elif choice == 5:
            current += self.create_node(UnlexerRule(src='<<='))
        elif choice == 6:
            current += self.create_node(UnlexerRule(src='>>='))
        elif choice == 7:
            current += self.create_node(UnlexerRule(src='>>>='))
        elif choice == 8:
            current += self.create_node(UnlexerRule(src='&='))
        elif choice == 9:
            current += self.create_node(UnlexerRule(src='^='))
        elif choice == 10:
            current += self.create_node(UnlexerRule(src='|='))
        return current
    assignmentOperator.min_depth = 0

    @depthcontrol
    def literal(self):
        current = self.create_node(UnparserRule(name='literal'))
        choice = self.choice([0 if [1, 1, 1, 1, 2, 2][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.unlexer.NullLiteral()
        elif choice == 1:
            current += self.unlexer.BooleanLiteral()
        elif choice == 2:
            current += self.unlexer.StringLiteral()
        elif choice == 3:
            current += self.unlexer.TemplateStringLiteral()
        elif choice == 4:
            current += self.unlexer.RegularExpressionLiteral()
        elif choice == 5:
            current += self.numericLiteral()
        return current
    literal.min_depth = 1

    @depthcontrol
    def numericLiteral(self):
        current = self.create_node(UnparserRule(name='numericLiteral'))
        choice = self.choice([0 if [1, 2, 1, 1, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.unlexer.DecimalLiteral()
        elif choice == 1:
            current += self.unlexer.HexIntegerLiteral()
        elif choice == 2:
            current += self.unlexer.OctalIntegerLiteral()
        elif choice == 3:
            current += self.unlexer.OctalIntegerLiteral2()
        elif choice == 4:
            current += self.unlexer.BinaryIntegerLiteral()
        return current
    numericLiteral.min_depth = 1

    @depthcontrol
    def identifierName(self):
        current = self.create_node(UnparserRule(name='identifierName'))
        choice = self.choice([0 if [2, 2][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1])])
        if choice == 0:
            current += self.unlexer.Identifier()
        elif choice == 1:
            current += self.reservedWord()
        return current
    identifierName.min_depth = 2

    @depthcontrol
    def reservedWord(self):
        current = self.create_node(UnparserRule(name='reservedWord'))
        choice = self.choice([0 if [2, 1, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1])])
        if choice == 0:
            current += self.keyword()
        elif choice == 1:
            current += self.unlexer.NullLiteral()
        elif choice == 2:
            current += self.unlexer.BooleanLiteral()
        return current
    reservedWord.min_depth = 1

    @depthcontrol
    def keyword(self):
        current = self.create_node(UnparserRule(name='keyword'))
        choice = self.choice([0 if [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])])
        if choice == 0:
            current += self.unlexer.Break()
        elif choice == 1:
            current += self.unlexer.Do()
        elif choice == 2:
            current += self.unlexer.Instanceof()
        elif choice == 3:
            current += self.unlexer.Typeof()
        elif choice == 4:
            current += self.unlexer.Case()
        elif choice == 5:
            current += self.unlexer.Else()
        elif choice == 6:
            current += self.unlexer.New()
        elif choice == 7:
            current += self.unlexer.Var()
        elif choice == 8:
            current += self.unlexer.Catch()
        elif choice == 9:
            current += self.unlexer.Finally()
        elif choice == 10:
            current += self.unlexer.Return()
        elif choice == 11:
            current += self.unlexer.Void()
        elif choice == 12:
            current += self.unlexer.Continue()
        elif choice == 13:
            current += self.unlexer.For()
        elif choice == 14:
            current += self.unlexer.Switch()
        elif choice == 15:
            current += self.unlexer.While()
        elif choice == 16:
            current += self.unlexer.Debugger()
        elif choice == 17:
            current += self.unlexer.Function()
        elif choice == 18:
            current += self.unlexer.This()
        elif choice == 19:
            current += self.unlexer.With()
        elif choice == 20:
            current += self.unlexer.Default()
        elif choice == 21:
            current += self.unlexer.If()
        elif choice == 22:
            current += self.unlexer.Throw()
        elif choice == 23:
            current += self.unlexer.Delete()
        elif choice == 24:
            current += self.unlexer.In()
        elif choice == 25:
            current += self.unlexer.Try()
        elif choice == 26:
            current += self.unlexer.Class()
        elif choice == 27:
            current += self.unlexer.Enum()
        elif choice == 28:
            current += self.unlexer.Extends()
        elif choice == 29:
            current += self.unlexer.Super()
        elif choice == 30:
            current += self.unlexer.Const()
        elif choice == 31:
            current += self.unlexer.Export()
        elif choice == 32:
            current += self.unlexer.Import()
        elif choice == 33:
            current += self.unlexer.Implements()
        elif choice == 34:
            current += self.unlexer.Let()
        elif choice == 35:
            current += self.unlexer.Private()
        elif choice == 36:
            current += self.unlexer.Public()
        elif choice == 37:
            current += self.unlexer.Interface()
        elif choice == 38:
            current += self.unlexer.Package()
        elif choice == 39:
            current += self.unlexer.Protected()
        elif choice == 40:
            current += self.unlexer.Static()
        elif choice == 41:
            current += self.unlexer.Yield()
        return current
    keyword.min_depth = 1

    @depthcontrol
    def getter(self):
        current = self.create_node(UnparserRule(name='getter'))
        current += self.unlexer.Identifier()
        current += self.propertyName()
        return current
    getter.min_depth = 2

    @depthcontrol
    def setter(self):
        current = self.create_node(UnparserRule(name='setter'))
        current += self.unlexer.Identifier()
        current += self.propertyName()
        return current
    setter.min_depth = 2

    @depthcontrol
    def eos(self):
        current = self.create_node(UnparserRule(name='eos'))
        choice = self.choice([0 if [1, 1, 0, 0][i] > self.unlexer.max_depth else w for i, w in enumerate([1, 1, 1, 1])])
        if choice == 0:
            current += self.unlexer.SemiColon()
        elif choice == 1:
            current += self.unlexer.EOF()
        elif choice == 2:
            pass
        elif choice == 3:
            pass
        return current
    eos.min_depth = 0

    default_rule = program

